(function(){"use strict";const arrayBuffer=new ArrayBuffer(12*16);const floatArray=new Float32Array(arrayBuffer);const intArray=new Int32Array(arrayBuffer);function hashFloat2(v0,v1){floatArray[0]=v0;floatArray[1]=v1;const hash=intArray[0];return hash*397^intArray[1]}function hashFloat3(v0,v1,v2){floatArray[0]=v0;floatArray[1]=v1;floatArray[2]=v2;let hash=intArray[0]|0;hash=hash*397^(intArray[1]|0);return hash*397^(intArray[2]|0)}function hashFloat4(v0,v1,v2,v3){floatArray[0]=v0;floatArray[1]=v1;floatArray[2]=v2;floatArray[3]=v3;let hash=intArray[0]|0;hash=hash*397^(intArray[1]|0);hash=hash*397^(intArray[2]|0);return hash*397^(intArray[3]|0)}function hashFloatArray(elements){for(let i=0;i<elements.length;i++){floatArray[i]=elements[i]}let hash=intArray[0]|0;for(let i=1;i<16;i++){hash=hash*397^(intArray[i]|0)}return hash}function clamp(value,min,max){return Math.min(Math.max(value,min),max)}class Vector2{constructor(x=0,y=0){this.x=x;this.y=y}get width(){return this.x}set width(width){this.x=width}get height(){return this.y}set height(height){this.y=height}getHashCode(){return hashFloat2(this.x,this.y)}set(x,y){this.x=x;this.y=y;return this}clone(){return(new Vector2).copy(this)}copy(v){return this.set(v.x,v.y)}add(v){this.x+=v.x;this.y+=v.y;return this}addScalar(s){this.x+=s;this.y+=s;return this}sub(v){this.x-=v.x;this.y-=v.y;return this}multiplyByScalar(s){this.x*=s;this.y*=s;return this}negate(){this.x*=-1;this.y*=-1;return this}normalize(){const length=this.length();return this.multiplyByScalar(length===0?1:0)}getComponent(index){if(index===0){return this.x}else if(index===1){return this.y}else{throw new Error(`index of our range: ${index}`)}}setComponent(index,value){if(index===0){this.x=value}else if(index===1){this.y=value}else{throw new Error(`index of our range: ${index}`)}return this}dot(v){return this.x*v.x+this.y*v.y}length(){return Math.sqrt(this.lengthSquared())}lengthSquared(){return this.x*this.x+this.y*this.y}min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);return this}max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);return this}clamp(min,max){this.x=clamp(this.x,min.x,max.x);this.y=clamp(this.y,min.y,max.y);return this}equals(v){return v.x===this.x&&v.y===this.y}setFromArray(array,offset){this.x=array[offset+0];this.y=array[offset+1]}toArray(array,offset){array[offset+0]=this.x;array[offset+1]=this.y}}class Vector3{constructor(x=0,y=0,z=0){this.x=x;this.y=y;this.z=z}get width(){return this.x}set width(width){this.x=width}get height(){return this.y}set height(height){this.y=height}get depth(){return this.z}set depth(depth){this.z=depth}get r(){return this.x}set r(r){this.x=r}get g(){return this.y}set g(g){this.y=g}get b(){return this.z}set b(b){this.z=b}getHashCode(){return hashFloat3(this.x,this.y,this.z)}set(x,y,z){this.x=x;this.y=y;this.z=z;return this}clone(){return(new Vector3).copy(this)}copy(v){return this.set(v.x,v.y,v.z)}add(v){this.x+=v.x;this.y+=v.y;this.z+=v.z;return this}addScalar(s){this.x+=s;this.y+=s;this.z+=s;return this}sub(v){this.x-=v.x;this.y-=v.y;this.z-=v.z;return this}multiplyByScalar(s){this.x*=s;this.y*=s;this.z*=s;return this}negate(){this.x*=-1;this.y*=-1;this.z*=-1;return this}lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;return this}normalize(){const length=this.length();return this.multiplyByScalar(length===0?1:1/length)}getComponent(index){if(index===0){return this.x}else if(index===1){return this.y}else if(index===2){return this.z}else{throw new Error(`index of our range: ${index}`)}}setComponent(index,value){if(index===0){this.x=value}else if(index===1){this.y=value}else if(index===2){this.z=value}else{throw new Error(`index of our range: ${index}`)}return this}dot(v){return this.x*v.x+this.y*v.y+this.z*v.z}cross(v){const ax=this.x,ay=this.y,az=this.z;const bx=v.x,by=v.y,bz=v.z;this.x=ay*bz-az*by;this.y=az*bx-ax*bz;this.z=ax*by-ay*bx;return this}length(){return Math.sqrt(this.lengthSquared())}lengthSquared(){return this.x*this.x+this.y*this.y+this.z*this.z}distanceToSquared(v){const dx=this.x-v.x;const dy=this.y-v.y;const dz=this.z-v.z;return dx*dx+dy*dy+dz*dz}distanceTo(v){return Math.sqrt(this.distanceToSquared(v))}min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);return this}max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);return this}clamp(min,max){this.x=clamp(this.x,min.x,max.x);this.y=clamp(this.y,min.y,max.y);this.z=clamp(this.z,min.z,max.z);return this}equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z}setFromArray(array,offset){this.x=array[offset+0];this.y=array[offset+1];this.z=array[offset+2]}toArray(array,offset){array[offset+0]=this.x;array[offset+1]=this.y;array[offset+2]=this.z}}const GL=WebGLRenderingContext;var ComponentType;(function(ComponentType){ComponentType[ComponentType["Byte"]=GL.BYTE]="Byte";ComponentType[ComponentType["UnsignedByte"]=GL.UNSIGNED_BYTE]="UnsignedByte";ComponentType[ComponentType["Short"]=GL.SHORT]="Short";ComponentType[ComponentType["UnsignedShort"]=GL.UNSIGNED_SHORT]="UnsignedShort";ComponentType[ComponentType["Int"]=GL.INT]="Int";ComponentType[ComponentType["UnsignedInt"]=GL.UNSIGNED_INT]="UnsignedInt";ComponentType[ComponentType["Float"]=GL.FLOAT]="Float"})(ComponentType||(ComponentType={}));function componentTypeSizeOf(componentType){switch(componentType){case ComponentType.Byte:case ComponentType.UnsignedByte:return 1;case ComponentType.Short:case ComponentType.UnsignedShort:return 2;case ComponentType.Float:case ComponentType.Int:case ComponentType.UnsignedInt:return 4}throw new Error(`unsupported component type: ${componentType}`)}const _lut=[];for(let i=0;i<256;i++){_lut[i]=(i<16?"0":"")+i.toString(16)}function generateUUID(){const d0=Math.random()*4294967296|0;const d1=Math.random()*4294967296|0;const d2=Math.random()*4294967296|0;const d3=Math.random()*4294967296|0;const uuid=_lut[d0&255]+_lut[d0>>8&255]+_lut[d0>>16&255]+_lut[d0>>24&255]+"-"+_lut[d1&255]+_lut[d1>>8&255]+"-"+_lut[d1>>16&15|64]+_lut[d1>>24&255]+"-"+_lut[d2&63|128]+_lut[d2>>8&255]+"-"+_lut[d2>>16&255]+_lut[d2>>24&255]+_lut[d3&255]+_lut[d3>>8&255]+_lut[d3>>16&255]+_lut[d3>>24&255];return uuid.toUpperCase()}var BufferTarget;(function(BufferTarget){BufferTarget[BufferTarget["Array"]=GL.ARRAY_BUFFER]="Array";BufferTarget[BufferTarget["ElementArray"]=GL.ELEMENT_ARRAY_BUFFER]="ElementArray"})(BufferTarget||(BufferTarget={}));class AttributeData{constructor(arrayBuffer,target=BufferTarget.Array){this.arrayBuffer=arrayBuffer;this.target=target;this.disposed=false;this.uuid=generateUUID();this.version=0}dirty(){this.version++}dispose(){if(!this.disposed){this.disposed=true;this.dirty()}}}class Attribute{constructor(attributeData,componentsPerVertex,componentType,vertexStride,byteOffset,normalized){this.attributeData=attributeData;this.componentsPerVertex=componentsPerVertex;this.componentType=componentType;this.vertexStride=vertexStride;this.byteOffset=byteOffset;this.normalized=normalized;this.bytesPerComponent=componentTypeSizeOf(this.componentType);this.bytesPerVertex=this.bytesPerComponent*this.componentsPerVertex;if(this.vertexStride<0){this.vertexStride=this.bytesPerVertex}this.count=this.attributeData.arrayBuffer.byteLength/this.vertexStride}}function makeFloat32Attribute(array,componentsPerVertex=1,normalized=false){return new Attribute(new AttributeData((array instanceof Float32Array?array:new Float32Array(array)).buffer),componentsPerVertex,ComponentType.Float,-1,0,normalized)}var PrimitiveType;(function(PrimitiveType){PrimitiveType[PrimitiveType["Points"]=GL.POINTS]="Points";PrimitiveType[PrimitiveType["Lines"]=GL.LINES]="Lines";PrimitiveType[PrimitiveType["LineStrip"]=GL.LINE_STRIP]="LineStrip";PrimitiveType[PrimitiveType["Triangles"]=GL.TRIANGLES]="Triangles";PrimitiveType[PrimitiveType["TriangleFan"]=GL.TRIANGLE_FAN]="TriangleFan";PrimitiveType[PrimitiveType["TriangleStrip"]=GL.TRIANGLE_STRIP]="TriangleStrip"})(PrimitiveType||(PrimitiveType={}));class Geometry{constructor(){this.disposed=false;this.version=0;this.indices=undefined;this.attributes={};this.primitive=PrimitiveType.Triangles}dirty(){this.version++}dispose(){if(!this.disposed){for(const name in this.attributes){const attribute=this.attributes[name];if(attribute!==undefined){attribute.attributeData.dispose()}}this.disposed=true;this.dirty()}}}class PrimitiveView{constructor(dataArray,floatPerPrimitive=-1,floatStride=-1,floatOffset=-1){this.floatStride=floatStride;this.floatOffset=floatOffset;if(dataArray instanceof Attribute){if(this.floatStride>=0){throw new Error("can not specify explicit byteStride when using Attribute argument")}if(this.floatOffset>=0){throw new Error("can not specify explicit byteOffset when using Attribute argument")}this.floatOffset=dataArray.byteOffset/4;this.floatStride=dataArray.vertexStride/4;this.floatArray=new Float32Array(dataArray.attributeData.arrayBuffer)}else if(dataArray instanceof Float32Array){this.floatArray=dataArray}else if(dataArray instanceof ArrayBuffer){this.floatArray=new Float32Array(dataArray)}else{throw new Error("unsupported value")}if(floatPerPrimitive<0){throw new Error("must specify bytesPerPrimitive or provide an Attribute argument")}if(this.floatStride<0){this.floatStride=floatPerPrimitive}if(this.floatOffset<0){this.floatOffset=0}this.count=this.floatArray.length/this.floatStride}set(index,v){v.toArray(this.floatArray,index*this.floatStride+this.floatOffset);return this}get(index,v){v.setFromArray(this.floatArray,index*this.floatStride+this.floatOffset);return v}}class Vector3View extends PrimitiveView{constructor(dataArray,byteStride=-1,byteOffset=-1){super(dataArray,12,byteStride,byteOffset);this.tempPrimitive=new Vector3}add(index,v){return this.set(index,this.get(index,this.tempPrimitive).add(v))}}function makeVector3View(dataArray,byteStride=-1,byteOffset=-1){return new Vector3View(dataArray,byteStride,byteOffset)}function computeVertexNormals(geometry){const indicesAttribute=geometry.indices;const attributes=geometry.attributes;const positionAttribute=attributes["position"];if(positionAttribute===undefined){throw new Error("missing position attribute")}let normalAttribute=attributes["normal"];if(normalAttribute===undefined){normalAttribute=makeFloat32Attribute(new Float32Array(positionAttribute.count*3),3);geometry.attributes["normal"]=normalAttribute}const positions=makeVector3View(positionAttribute);const normals=makeVector3View(normalAttribute);for(let i=0,il=normals.count;i<il;i++){normals.set(i,new Vector3)}const pA=new Vector3;const pB=new Vector3;const pC=new Vector3;const cb=new Vector3;const ab=new Vector3;if(indicesAttribute!==undefined){const indices=new Uint32Array(indicesAttribute.attributeData.arrayBuffer);for(let i=0,il=indices.length;i<il;i+=3){const vA=indices[i+0];const vB=indices[i+1];const vC=indices[i+2];positions.get(vA,pA);positions.get(vB,pB);positions.get(vC,pC);cb.copy(pC).sub(pB);ab.copy(pA).sub(pB);cb.cross(ab);normals.add(vA,cb);normals.add(vB,cb);normals.add(vC,cb)}}else{for(let i=0,il=positions.count;i<il;i+=3){positions.get(i,pA);positions.get(i+1,pB);positions.get(i+2,pC);cb.copy(pC).sub(pB);ab.copy(pA).sub(pB);cb.cross(ab);normals.add(i,cb);normals.add(i+1,cb);normals.add(i+2,cb)}}const v=new Vector3;for(let i=0,il=normals.count;i<il;i+=3){normals.set(i,normals.get(i,v).normalize())}}function icosahedronGeometry(radius=1,detail=0){const t=(1+Math.sqrt(5))/2;const vertices=[-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,t,0,1,t,0,-1,-t,0,1,-t,t,0,-1,t,0,1,-t,0,-1,-t,0,1];const indices=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];return polyhedronGeometry(vertices,indices,radius,detail)}function polyhedronGeometry(vertices,indices,radius=1,detail=0){const vertexBuffer=[];const uvBuffer=[];subdivide(detail);applyRadius(radius);generateUVs();const geometry=new Geometry;geometry.attributes["position"]=makeFloat32Attribute(vertexBuffer,3);geometry.attributes["normal"]=makeFloat32Attribute(vertexBuffer.slice(),3);geometry.attributes["uv"]=makeFloat32Attribute(uvBuffer,2);computeVertexNormals(geometry);function subdivide(detail){const a=new Vector3;const b=new Vector3;const c=new Vector3;for(let i=0;i<indices.length;i+=3){getVertexByIndex(indices[i+0],a);getVertexByIndex(indices[i+1],b);getVertexByIndex(indices[i+2],c);subdivideFace(a,b,c,detail)}}function subdivideFace(a,b,c,detail){const cols=Math.pow(2,detail);const v=[];for(let i=0;i<=cols;i++){v[i]=[];const aj=a.clone().lerp(c,i/cols);const bj=b.clone().lerp(c,i/cols);const rows=cols-i;for(let j=0;j<=rows;j++){if(j===0&&i===cols){v[i][j]=aj}else{v[i][j]=aj.clone().lerp(bj,j/rows)}}}for(let i=0;i<cols;i++){for(let j=0;j<2*(cols-i)-1;j++){const k=Math.floor(j/2);if(j%2===0){pushVertex(v[i][k+1]);pushVertex(v[i+1][k]);pushVertex(v[i][k])}else{pushVertex(v[i][k+1]);pushVertex(v[i+1][k+1]);pushVertex(v[i+1][k])}}}}function applyRadius(radius){const vertex=new Vector3;for(let i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];vertex.normalize().multiplyByScalar(radius);vertexBuffer[i+0]=vertex.x;vertexBuffer[i+1]=vertex.y;vertexBuffer[i+2]=vertex.z}}function generateUVs(){const vertex=new Vector3;for(let i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];const u=azimuth(vertex)/2/Math.PI+.5;const v=inclination(vertex)/Math.PI+.5;uvBuffer.push(u,1-v)}correctUVs();correctSeam()}function correctSeam(){for(let i=0;i<uvBuffer.length;i+=6){const x0=uvBuffer[i+0];const x1=uvBuffer[i+2];const x2=uvBuffer[i+4];const max=Math.max(x0,x1,x2);const min=Math.min(x0,x1,x2);if(max>.9&&min<.1){if(x0<.2){uvBuffer[i+0]+=1}if(x1<.2){uvBuffer[i+2]+=1}if(x2<.2){uvBuffer[i+4]+=1}}}}function pushVertex(vertex){vertexBuffer.push(vertex.x,vertex.y,vertex.z)}function getVertexByIndex(index,vertex){const stride=index*3;vertex.x=vertices[stride+0];vertex.y=vertices[stride+1];vertex.z=vertices[stride+2]}function correctUVs(){const a=new Vector3;const b=new Vector3;const c=new Vector3;const centroid=new Vector3;const uvA=new Vector2;const uvB=new Vector2;const uvC=new Vector2;for(let i=0,j=0;i<vertexBuffer.length;i+=9,j+=6){a.set(vertexBuffer[i+0],vertexBuffer[i+1],vertexBuffer[i+2]);b.set(vertexBuffer[i+3],vertexBuffer[i+4],vertexBuffer[i+5]);c.set(vertexBuffer[i+6],vertexBuffer[i+7],vertexBuffer[i+8]);uvA.set(uvBuffer[j+0],uvBuffer[j+1]);uvB.set(uvBuffer[j+2],uvBuffer[j+3]);uvC.set(uvBuffer[j+4],uvBuffer[j+5]);centroid.copy(a).add(b).add(c).multiplyByScalar(1/3);const azi=azimuth(centroid);correctUV(uvA,j+0,a,azi);correctUV(uvB,j+2,b,azi);correctUV(uvC,j+4,c,azi)}}function correctUV(uv,stride,vector,azimuth){if(azimuth<0&&uv.x===1){uvBuffer[stride]=uv.x-1}if(vector.x===0&&vector.z===0){uvBuffer[stride]=azimuth/2/Math.PI+.5}}function azimuth(vector){return Math.atan2(vector.z,-vector.x)}function inclination(vector){return Math.atan2(-vector.y,Math.sqrt(vector.x*vector.x+vector.z*vector.z))}return geometry}class ShaderMaterial{constructor(vertexShaderCode,fragmentShaderCode,glslVersion=200){this.vertexShaderCode=vertexShaderCode;this.fragmentShaderCode=fragmentShaderCode;this.glslVersion=glslVersion;this.uuid=generateUUID();this.version=0;this.disposed=false;this.name=""}dirty(){this.version++}dispose(){this.disposed=true;this.dirty()}}var EulerOrder;(function(EulerOrder){EulerOrder[EulerOrder["XYZ"]=0]="XYZ";EulerOrder[EulerOrder["YXZ"]=1]="YXZ";EulerOrder[EulerOrder["ZXY"]=2]="ZXY";EulerOrder[EulerOrder["ZYX"]=3]="ZYX";EulerOrder[EulerOrder["YZX"]=4]="YZX";EulerOrder[EulerOrder["XZY"]=5]="XZY";EulerOrder[EulerOrder["Default"]=0]="Default"})(EulerOrder||(EulerOrder={}));class Euler{constructor(x=0,y=0,z=0,order=EulerOrder.Default){this.x=x;this.y=y;this.z=z;this.order=order}getHashCode(){return hashFloat4(this.x,this.y,this.z,this.order)}set(x,y,z,order=EulerOrder.Default){this.x=z;this.y=y;this.z=z;this.order=order;return this}clone(){return(new Euler).copy(this)}copy(e){return this.set(e.x,e.y,e.z,e.order)}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.order===this.order}setFromArray(array,offset){this.x=array[offset+0];this.y=array[offset+1];this.z=array[offset+2];this.order=array[offset+3]}toArray(array,offset){array[offset+0]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;array[offset+3]=this.order}}class Matrix4{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}getHashCode(){return hashFloatArray(this.elements)}set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){const te=this.elements;te[0]=n11;te[4]=n12;te[8]=n13;te[12]=n14;te[1]=n21;te[5]=n22;te[9]=n23;te[13]=n24;te[2]=n31;te[6]=n32;te[10]=n33;te[14]=n34;te[3]=n41;te[7]=n42;te[11]=n43;te[15]=n44;return this}clone(){return(new Matrix4).copy(this)}copy(m){const me=m.elements;return this.set(me[0],me[4],me[8],me[12],me[1],me[5],me[9],me[13],me[2],me[6],me[10],me[14],me[3],me[7],me[11],me[15])}getComponent(index){return this.elements[index]}setComponent(index,value){this.elements[index]=value;return this}multiplyByScalar(s){const te=this.elements;te[0]*=s;te[4]*=s;te[8]*=s;te[12]*=s;te[1]*=s;te[5]*=s;te[9]*=s;te[13]*=s;te[2]*=s;te[6]*=s;te[10]*=s;te[14]*=s;te[3]*=s;te[7]*=s;te[11]*=s;te[15]*=s;return this}makeIdentity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)}equals(m){for(let i=0;i<16;i++){if(m.elements[i]!==this.elements[i]){return false}}return true}setFromArray(array,offset){for(let i=0;i<this.elements.length;i++){this.elements[i]=array[offset+i]}}toArray(array,offset){for(let i=0;i<this.elements.length;i++){array[offset+i]=this.elements[i]}}}function makeMatrix4Translation(t,result=new Matrix4){return result.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1)}function makeMatrix4RotationFromEuler(euler,result=new Matrix4){const te=result.elements;const x=euler.x,y=euler.y,z=euler.z;const a=Math.cos(x),b=Math.sin(x);const c=Math.cos(y),d=Math.sin(y);const e=Math.cos(z),f=Math.sin(z);if(euler.order===EulerOrder.XYZ){const ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=-c*f;te[8]=d;te[1]=af+be*d;te[5]=ae-bf*d;te[9]=-b*c;te[2]=bf-ae*d;te[6]=be+af*d;te[10]=a*c}else if(euler.order===EulerOrder.YXZ){const ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce+df*b;te[4]=de*b-cf;te[8]=a*d;te[1]=a*f;te[5]=a*e;te[9]=-b;te[2]=cf*b-de;te[6]=df+ce*b;te[10]=a*c}else if(euler.order===EulerOrder.ZXY){const ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce-df*b;te[4]=-a*f;te[8]=de+cf*b;te[1]=cf+de*b;te[5]=a*e;te[9]=df-ce*b;te[2]=-a*d;te[6]=b;te[10]=a*c}else if(euler.order===EulerOrder.ZYX){const ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=be*d-af;te[8]=ae*d+bf;te[1]=c*f;te[5]=bf*d+ae;te[9]=af*d-be;te[2]=-d;te[6]=b*c;te[10]=a*c}else if(euler.order===EulerOrder.YZX){const ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=bd-ac*f;te[8]=bc*f+ad;te[1]=f;te[5]=a*e;te[9]=-b*e;te[2]=-d*e;te[6]=ad*f+bc;te[10]=ac-bd*f}else if(euler.order===EulerOrder.XZY){const ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=-f;te[8]=d*e;te[1]=ac*f+bd;te[5]=a*e;te[9]=ad*f-bc;te[2]=bc*f-ad;te[6]=b*e;te[10]=bd*f+ac}te[3]=0;te[7]=0;te[11]=0;te[12]=0;te[13]=0;te[14]=0;te[15]=1;return result}function makeMatrix4Perspective(left,right,top,bottom,near,far,result=new Matrix4){const x=2*near/(right-left);const y=2*near/(top-bottom);const a=(right+left)/(right-left);const b=(top+bottom)/(top-bottom);const c=-(far+near)/(far-near);const d=-2*far*near/(far-near);return result.set(x,0,a,0,0,y,b,0,0,0,c,d,0,0,-1,0)}function makeMatrix4PerspectiveFov(verticalFov,near,far,zoom,aspectRatio,result=new Matrix4){const height=2*near*Math.tan(verticalFov*Math.PI/180)/zoom;const width=height*aspectRatio;const right=width*.5;const left=right-width;const top=height*.5;const bottom=top-height;return makeMatrix4Perspective(left,right,top,bottom,near,far,result)}var BufferUsage;(function(BufferUsage){BufferUsage[BufferUsage["StaticDraw"]=GL.STATIC_DRAW]="StaticDraw";BufferUsage[BufferUsage["DynamicDraw"]=GL.DYNAMIC_DRAW]="DynamicDraw"})(BufferUsage||(BufferUsage={}));class Buffer{constructor(context,arrayBuffer,target=BufferTarget.Array,usage=BufferUsage.StaticDraw){this.context=context;this.target=target;this.usage=usage;this.disposed=false;const gl=context.gl;{const glBuffer=gl.createBuffer();if(glBuffer===null){throw new Error("createBuffer failed")}this.glBuffer=glBuffer}gl.bindBuffer(this.target,this.glBuffer);gl.bufferData(this.target,arrayBuffer,this.usage)}update(arrayBuffer,target=BufferTarget.Array,usage=BufferUsage.StaticDraw){this.target=target;this.usage=usage;const gl=this.context.gl;gl.bindBuffer(this.target,this.glBuffer);gl.bufferData(this.target,arrayBuffer,this.usage)}dispose(){if(!this.disposed){this.context.gl.deleteBuffer(this.glBuffer);this.disposed=true}}}class BufferAccessor{constructor(buffer,componentType,componentsPerVertex,normalized,vertexStride,byteOffset){this.buffer=buffer;this.componentType=componentType;this.componentsPerVertex=componentsPerVertex;this.normalized=normalized;this.vertexStride=vertexStride;this.byteOffset=byteOffset}}function makeBufferAccessorFromAttribute(context,attribute,bufferTarget=undefined){const attributeData=attribute.attributeData;const target=bufferTarget!==undefined?bufferTarget:attributeData.target;const buffer=new Buffer(context,attributeData.arrayBuffer,target);const bufferAccessor=new BufferAccessor(buffer,attribute.componentType,attribute.componentsPerVertex,attribute.normalized,attribute.vertexStride,attribute.byteOffset);return bufferAccessor}class BufferGeometry{constructor(context){this.context=context;this.disposed=false;this.bufferAccessors={};this.indices=undefined;this.primitive=PrimitiveType.Triangles;this.count=-1}dispose(){console.warn("This is not safe.  The buffers may be used by multiple bufferViews & bufferGeometries.");if(!this.disposed){for(const name in this.bufferAccessors){const bufferAccessor=this.bufferAccessors[name];if(bufferAccessor!==undefined){bufferAccessor.buffer.dispose()}}if(this.indices!==undefined){this.indices.buffer.dispose()}this.disposed=true}}}function makeBufferGeometryFromGeometry(context,geometry){const bufferGeometry=new BufferGeometry(context);if(geometry.indices!==undefined){bufferGeometry.indices=makeBufferAccessorFromAttribute(context,geometry.indices,BufferTarget.ElementArray);bufferGeometry.count=geometry.indices.count}for(const name in geometry.attributes){const attribute=geometry.attributes[name];if(attribute!==undefined){bufferGeometry.bufferAccessors[name]=makeBufferAccessorFromAttribute(context,attribute);if(bufferGeometry.count===-1){bufferGeometry.count=attribute.count}}}bufferGeometry.primitive=geometry.primitive;return bufferGeometry}class ClearState{constructor(color=new Vector3(1,1,1),alpha=0,depth=1,stencil=0){this.color=color;this.alpha=alpha;this.depth=depth;this.stencil=stencil}clone(){return new ClearState(this.color,this.alpha,this.depth,this.stencil)}copy(cs){this.color.copy(cs.color);this.alpha=cs.alpha;this.depth=cs.depth;this.stencil=cs.stencil}equals(cs){return this.color.equals(cs.color)&&this.alpha===cs.alpha&&this.depth===cs.depth&&this.stencil===cs.stencil}}var WindingOrder;(function(WindingOrder){WindingOrder[WindingOrder["Clockwise"]=GL.CW]="Clockwise";WindingOrder[WindingOrder["CounterClockwise"]=GL.CCW]="CounterClockwise"})(WindingOrder||(WindingOrder={}));var CullingSide;(function(CullingSide){CullingSide[CullingSide["Front"]=GL.FRONT]="Front";CullingSide[CullingSide["Back"]=GL.BACK]="Back";CullingSide[CullingSide["FrontBack"]=GL.FRONT_AND_BACK]="FrontBack"})(CullingSide||(CullingSide={}));class CullingState{constructor(enabled=true,sides=CullingSide.Back,windingOrder=WindingOrder.CounterClockwise){this.enabled=enabled;this.sides=sides;this.windingOrder=windingOrder}clone(){return new CullingState(this.enabled,this.sides,this.windingOrder)}copy(cs){this.enabled=cs.enabled;this.sides=cs.sides;this.windingOrder=cs.windingOrder}equals(cs){return this.enabled===cs.enabled&&this.sides===cs.sides&&this.windingOrder===cs.windingOrder}}var DepthTestFunc;(function(DepthTestFunc){DepthTestFunc[DepthTestFunc["Never"]=GL.NEVER]="Never";DepthTestFunc[DepthTestFunc["Less"]=GL.LESS]="Less";DepthTestFunc[DepthTestFunc["Equal"]=GL.EQUAL]="Equal";DepthTestFunc[DepthTestFunc["LessOrEqual"]=GL.LEQUAL]="LessOrEqual";DepthTestFunc[DepthTestFunc["Greater"]=GL.GREATER]="Greater";DepthTestFunc[DepthTestFunc["NotEqual"]=GL.NOTEQUAL]="NotEqual";DepthTestFunc[DepthTestFunc["GreaterOrEqual"]=GL.GEQUAL]="GreaterOrEqual";DepthTestFunc[DepthTestFunc["Always"]=GL.ALWAYS]="Always"})(DepthTestFunc||(DepthTestFunc={}));class DepthTestState{constructor(enabled=false,func=DepthTestFunc.Less){this.enabled=enabled;this.func=func}clone(){return new DepthTestState(this.enabled,this.func)}copy(dts){this.enabled=dts.enabled;this.func=dts.func}equals(dts){return this.enabled===dts.enabled&&this.func===dts.func}}var AttachmentBits;(function(AttachmentBits){AttachmentBits[AttachmentBits["None"]=0]="None";AttachmentBits[AttachmentBits["Color"]=GL.COLOR_BUFFER_BIT]="Color";AttachmentBits[AttachmentBits["Depth"]=GL.DEPTH_BUFFER_BIT]="Depth";AttachmentBits[AttachmentBits["Stencil"]=GL.STENCIL_BUFFER_BIT]="Stencil";AttachmentBits[AttachmentBits["Default"]=AttachmentBits.Color|AttachmentBits.Depth]="Default";AttachmentBits[AttachmentBits["All"]=AttachmentBits.Color|AttachmentBits.Depth|AttachmentBits.Stencil]="All"})(AttachmentBits||(AttachmentBits={}));var ShaderType;(function(ShaderType){ShaderType[ShaderType["Fragment"]=GL.FRAGMENT_SHADER]="Fragment";ShaderType[ShaderType["Vertex"]=GL.VERTEX_SHADER]="Vertex"})(ShaderType||(ShaderType={}));var __classPrivateFieldGet=undefined&&undefined.__classPrivateFieldGet||function(receiver,privateMap){if(!privateMap.has(receiver)){throw new TypeError("attempted to get private field on non-instance")}return privateMap.get(receiver)};var __classPrivateFieldSet=undefined&&undefined.__classPrivateFieldSet||function(receiver,privateMap,value){if(!privateMap.has(receiver)){throw new TypeError("attempted to set private field on non-instance")}privateMap.set(receiver,value);return value};var _validated;function insertLineNumbers(sourceCode){const inputLines=sourceCode.split("\n");const outputLines=["\n"];const maxLineCharacters=Math.floor(Math.log10(inputLines.length));for(let l=0;l<inputLines.length;l++){const lAsString=`000000${l}`.slice(-maxLineCharacters-1);outputLines.push(`${lAsString}: ${inputLines[l]}`)}return outputLines.join("\n")}function removeDeadCode(sourceCode){const defineRegexp=/^#define +([\w\d_]+)/;const undefRegexp=/^#undef +([\w\d_]+)/;const ifdefRegexp=/^#ifdef +([\w\d_]+)/;const ifndefRegexp=/^#ifndef +([\w\d_]+)/;const endifRegexp=/^#endif.* /;let defines=[];const liveCodeStack=[true];const outputLines=[];sourceCode.split("\n").forEach(line=>{const isLive=liveCodeStack[liveCodeStack.length-1];if(isLive){const defineMatch=line.match(defineRegexp);if(defineMatch!==null){defines.push(defineMatch[1])}const undefMatch=line.match(undefRegexp);if(undefMatch!==null){const indexOfDefine=defines.indexOf(undefMatch[1]);if(indexOfDefine>=0){defines=defines.splice(indexOfDefine,1)}}const ifdefMatch=line.match(ifdefRegexp);if(ifdefMatch!==null){liveCodeStack.push(defines.indexOf(ifdefMatch[1])>=0);return}const ifndefMatch=line.match(ifndefRegexp);if(ifndefMatch!==null){liveCodeStack.push(defines.indexOf(ifndefMatch[1])<0);return}}const endifMatch=line.match(endifRegexp);if(endifMatch!==null){liveCodeStack.pop();return}if(isLive){outputLines.push(line)}});return outputLines.join("\n").replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm,"").replace(/[\r\n]+/g,"\n")}class Shader{constructor(context,sourceCode,shaderType,glslVersion=300){this.context=context;this.sourceCode=sourceCode;this.shaderType=shaderType;this.glslVersion=glslVersion;this.disposed=false;_validated.set(this,false);const gl=this.context.gl;{const glShader=gl.createShader(shaderType);if(glShader===null){throw new Error("createShader failed")}this.glShader=glShader}const prefix=[];if(glslVersion===300){prefix.push("#version 300 es")}if(shaderType===ShaderType.Fragment){const glxo=context.glxo;if(glxo.EXT_shader_texture_lod!==null){prefix.push("#extension GL_EXT_shader_texture_lod : enable")}prefix.push("#extension GL_OES_standard_derivatives : enable")}const combinedSourceCode=prefix.join("\n")+"\n"+sourceCode;this.finalSourceCode=removeDeadCode(combinedSourceCode);gl.shaderSource(this.glShader,this.finalSourceCode);gl.compileShader(this.glShader)}get translatedSourceCode(){const ds=this.context.glxo.WEBGL_debug_shaders;if(ds!==null){return ds.getTranslatedShaderSource(this.glShader)}return""}validate(){if(__classPrivateFieldGet(this,_validated)||this.disposed){return}const gl=this.context.gl;const compileStatus=gl.getShaderParameter(this.glShader,GL.COMPILE_STATUS);if(!compileStatus){const infoLog=gl.getShaderInfoLog(this.glShader);const errorMessage=`could not compile shader:\n${infoLog}`;console.error(errorMessage);console.error(insertLineNumbers(this.finalSourceCode));this.disposed=true;throw new Error(errorMessage)}__classPrivateFieldSet(this,_validated,true)}dispose(){if(!this.disposed){this.context.gl.deleteShader(this.glShader);this.disposed=true}}}_validated=new WeakMap;class VertexArrayObject{constructor(program,bufferGeometry){this.program=program;this.disposed=false;this.primitive=PrimitiveType.Triangles;this.offset=0;this.count=-1;this.primitive=bufferGeometry.primitive;this.count=bufferGeometry.count;const glxVAO=this.program.context.glx.OES_vertex_array_object;{const vao=glxVAO.createVertexArrayOES();if(vao===null){throw new Error("createVertexArray failed")}this.glVertexArrayObject=vao}glxVAO.bindVertexArrayOES(this.glVertexArrayObject);program.setAttributeBuffers(bufferGeometry)}dispose(){if(!this.disposed){const glxVAO=this.program.context.glx.OES_vertex_array_object;glxVAO.deleteVertexArrayOES(this.glVertexArrayObject);this.disposed=true}}}class ProgramAttribute{constructor(program,index){this.program=program;this.index=index;this.name=name;const gl=program.context.gl;{const activeInfo=gl.getActiveAttrib(program.glProgram,index);if(activeInfo===null){throw new Error(`can not find attribute with index: ${index}`)}this.name=activeInfo.name;this.size=activeInfo.size;this.type=activeInfo.type;const glLocation=gl.getAttribLocation(program.glProgram,this.name);if(glLocation<0){throw new Error(`can not find attribute named: ${this.name}`)}this.glLocation=glLocation}}setBuffer(bufferAccessor){const gl=this.program.context.gl;gl.enableVertexAttribArray(this.glLocation);gl.bindBuffer(GL.ARRAY_BUFFER,bufferAccessor.buffer.glBuffer);gl.vertexAttribPointer(this.glLocation,bufferAccessor.componentsPerVertex,bufferAccessor.componentType,bufferAccessor.normalized,bufferAccessor.vertexStride,bufferAccessor.byteOffset);return this}}function linearizeVector2FloatArray(array){const result=new Float32Array(array.length*2);for(let i=0;i<array.length;i++){array[i].toArray(result,i*2)}return result}function linearizeVector3FloatArray(array){const result=new Float32Array(array.length*3);for(let i=0;i<array.length;i++){array[i].toArray(result,i*3)}return result}function linearizeMatrix4FloatArray(array){const result=new Float32Array(array.length*16);for(let i=0;i<array.length;i++){array[i].toArray(result,i*16)}return result}var DataType;(function(DataType){DataType[DataType["Byte"]=GL.BYTE]="Byte";DataType[DataType["UnsignedByte"]=GL.UNSIGNED_BYTE]="UnsignedByte";DataType[DataType["Short"]=GL.SHORT]="Short";DataType[DataType["UnsignedShort"]=GL.UNSIGNED_SHORT]="UnsignedShort";DataType[DataType["Int"]=GL.INT]="Int";DataType[DataType["UnsignedInt"]=GL.UNSIGNED_INT]="UnsignedInt";DataType[DataType["Float"]=GL.FLOAT]="Float"})(DataType||(DataType={}));function sizeOfDataType(dataType){switch(dataType){case DataType.Byte:case DataType.UnsignedByte:return 1;case DataType.Short:case DataType.UnsignedShort:return 2;case DataType.Int:case DataType.UnsignedInt:case DataType.Float:return 5}throw new Error(`unsupported data type: ${dataType}`)}var PixelEncoding;(function(PixelEncoding){PixelEncoding[PixelEncoding["Linear"]=0]="Linear";PixelEncoding[PixelEncoding["sRGB"]=1]="sRGB";PixelEncoding[PixelEncoding["RGBE"]=2]="RGBE";PixelEncoding[PixelEncoding["RGBD"]=3]="RGBD"})(PixelEncoding||(PixelEncoding={}));class ArrayBufferImage{constructor(data,width,height,dataType=DataType.UnsignedByte,pixelEncoding=PixelEncoding.sRGB){this.data=data;this.width=width;this.height=height;this.dataType=dataType;this.pixelEncoding=pixelEncoding}}var PixelFormat;(function(PixelFormat){PixelFormat[PixelFormat["RGBA"]=GL.RGBA]="RGBA";PixelFormat[PixelFormat["RGB"]=GL.RGB]="RGB";PixelFormat[PixelFormat["LuminanceAlpha"]=GL.LUMINANCE_ALPHA]="LuminanceAlpha";PixelFormat[PixelFormat["Luminance"]=GL.LUMINANCE]="Luminance";PixelFormat[PixelFormat["Alpha"]=GL.ALPHA]="Alpha";PixelFormat[PixelFormat["DepthComponent"]=GL.DEPTH_COMPONENT]="DepthComponent";PixelFormat[PixelFormat["DepthStencil"]=GL.DEPTH_STENCIL]="DepthStencil"})(PixelFormat||(PixelFormat={}));function numPixelFormatComponents(pixelFormat){switch(pixelFormat){case PixelFormat.Alpha:case PixelFormat.Luminance:case PixelFormat.DepthComponent:return 1;case PixelFormat.LuminanceAlpha:case PixelFormat.DepthStencil:return 2;case PixelFormat.RGB:return 3;case PixelFormat.RGBA:return 4}throw new Error(`unsupported pixel format: ${pixelFormat}`)}var TextureFilter;(function(TextureFilter){TextureFilter[TextureFilter["LinearMipmapLinear"]=GL.LINEAR_MIPMAP_LINEAR]="LinearMipmapLinear";TextureFilter[TextureFilter["LinearMipmapNearest"]=GL.LINEAR_MIPMAP_NEAREST]="LinearMipmapNearest";TextureFilter[TextureFilter["Linear"]=GL.LINEAR]="Linear";TextureFilter[TextureFilter["Nearest"]=GL.NEAREST]="Nearest";TextureFilter[TextureFilter["NearestMipmapLinear"]=GL.NEAREST_MIPMAP_LINEAR]="NearestMipmapLinear";TextureFilter[TextureFilter["NearestMipmapNearest"]=GL.NEAREST_MIPMAP_NEAREST]="NearestMipmapNearest"})(TextureFilter||(TextureFilter={}));var TextureWrap;(function(TextureWrap){TextureWrap[TextureWrap["MirroredRepeat"]=GL.MIRRORED_REPEAT]="MirroredRepeat";TextureWrap[TextureWrap["ClampToEdge"]=GL.CLAMP_TO_EDGE]="ClampToEdge";TextureWrap[TextureWrap["Repeat"]=GL.REPEAT]="Repeat"})(TextureWrap||(TextureWrap={}));class TexParameters{constructor(){this.generateMipmaps=true;this.wrapS=TextureWrap.Repeat;this.wrapT=TextureWrap.Repeat;this.magFilter=TextureFilter.Linear;this.minFilter=TextureFilter.LinearMipmapLinear;this.anisotropyLevels=2}}var TextureTarget;(function(TextureTarget){TextureTarget[TextureTarget["Texture2D"]=GL.TEXTURE_2D]="Texture2D";TextureTarget[TextureTarget["TextureCubeMap"]=GL.TEXTURE_CUBE_MAP]="TextureCubeMap";TextureTarget[TextureTarget["CubeMapPositiveX"]=GL.TEXTURE_CUBE_MAP_POSITIVE_X]="CubeMapPositiveX";TextureTarget[TextureTarget["CubeMapNegativeX"]=GL.TEXTURE_CUBE_MAP_NEGATIVE_X]="CubeMapNegativeX";TextureTarget[TextureTarget["CubeMapPositiveY"]=GL.TEXTURE_CUBE_MAP_POSITIVE_Y]="CubeMapPositiveY";TextureTarget[TextureTarget["CubeMapNegativeY"]=GL.TEXTURE_CUBE_MAP_NEGATIVE_Y]="CubeMapNegativeY";TextureTarget[TextureTarget["CubeMapPositiveZ"]=GL.TEXTURE_CUBE_MAP_POSITIVE_Z]="CubeMapPositiveZ";TextureTarget[TextureTarget["CubeMapNegativeZ"]=GL.TEXTURE_CUBE_MAP_NEGATIVE_Z]="CubeMapNegativeZ"})(TextureTarget||(TextureTarget={}));class TexImage2D{constructor(context,images,size,level=0,internalFormat=PixelFormat.RGBA,dataType=DataType.UnsignedByte,pixelFormat=PixelFormat.RGBA,target=TextureTarget.Texture2D,texParameters=new TexParameters){this.context=context;this.images=images;this.size=size;this.level=level;this.internalFormat=internalFormat;this.dataType=dataType;this.pixelFormat=pixelFormat;this.target=target;this.texParameters=texParameters;this.disposed=false;const gl=this.context.gl;{const glTexture=gl.createTexture();if(glTexture===null){throw new Error("createTexture failed")}this.glTexture=glTexture}gl.bindTexture(this.target,this.glTexture);if(images.length===0){gl.texImage2D(this.target,this.level,this.internalFormat,this.size.width,this.size.height,0,this.pixelFormat,this.dataType,null)}else if(images.length===1){this.loadImage(images[0])}else if(images.length===6){images.forEach((image,index)=>{this.loadImage(image,TextureTarget.CubeMapPositiveX+index)})}else{throw new Error("Unsupported number of images")}gl.texParameteri(this.target,GL.TEXTURE_WRAP_S,texParameters.wrapS);gl.texParameteri(this.target,GL.TEXTURE_WRAP_T,texParameters.wrapS);gl.texParameteri(this.target,GL.TEXTURE_MAG_FILTER,texParameters.magFilter);gl.texParameteri(this.target,GL.TEXTURE_MIN_FILTER,texParameters.minFilter);if(texParameters.anisotropyLevels>1){const tfa=this.context.glxo.EXT_texture_filter_anisotropic;if(tfa!==null){const maxAllowableAnisotropy=gl.getParameter(tfa.MAX_TEXTURE_MAX_ANISOTROPY_EXT);gl.texParameterf(this.target,tfa.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texParameters.anisotropyLevels,maxAllowableAnisotropy))}}if(texParameters.generateMipmaps){gl.generateMipmap(this.target)}gl.bindTexture(this.target,null)}dispose(){if(!this.disposed){this.context.gl.deleteTexture(this.glTexture);this.disposed=true}}loadImage(image,target=undefined){const gl=this.context.gl;if(image instanceof ArrayBufferImage){gl.texImage2D(target!==null&&target!==void 0?target:this.target,this.level,this.internalFormat,this.size.width,this.size.height,0,this.pixelFormat,this.dataType,new Uint8Array(image.data))}else if(image instanceof HTMLImageElement){gl.texImage2D(target!==null&&target!==void 0?target:this.target,this.level,this.internalFormat,this.pixelFormat,this.dataType,image)}else{throw new Error("unsupported image type")}}}function makeTexImage2DFromTexture(context,texture,level=0,internalFormat=PixelFormat.RGBA){return new TexImage2D(context,[texture.image],texture.size,level,texture.pixelFormat,texture.dataType,internalFormat,TextureTarget.Texture2D)}var UniformType;(function(UniformType){UniformType[UniformType["Bool"]=GL.BOOL]="Bool";UniformType[UniformType["BoolVec2"]=GL.BOOL_VEC2]="BoolVec2";UniformType[UniformType["BoolVec3"]=GL.BOOL_VEC3]="BoolVec3";UniformType[UniformType["BoolVec4"]=GL.BOOL_VEC4]="BoolVec4";UniformType[UniformType["Int"]=GL.INT]="Int";UniformType[UniformType["IntVec2"]=GL.INT_VEC2]="IntVec2";UniformType[UniformType["IntVec3"]=GL.INT_VEC3]="IntVec3";UniformType[UniformType["IntVec4"]=GL.INT_VEC4]="IntVec4";UniformType[UniformType["Float"]=GL.FLOAT]="Float";UniformType[UniformType["FloatVec2"]=GL.FLOAT_VEC2]="FloatVec2";UniformType[UniformType["FloatVec3"]=GL.FLOAT_VEC3]="FloatVec3";UniformType[UniformType["FloatVec4"]=GL.FLOAT_VEC4]="FloatVec4";UniformType[UniformType["FloatMat2"]=GL.FLOAT_MAT2]="FloatMat2";UniformType[UniformType["FloatMat3"]=GL.FLOAT_MAT3]="FloatMat3";UniformType[UniformType["FloatMat4"]=GL.FLOAT_MAT4]="FloatMat4";UniformType[UniformType["Sampler2D"]=GL.SAMPLER_2D]="Sampler2D";UniformType[UniformType["SamplerCube"]=GL.SAMPLER_CUBE]="SamplerCube"})(UniformType||(UniformType={}));function numTextureUnits(uniformType){switch(uniformType){case UniformType.Sampler2D:return 1;case UniformType.SamplerCube:return 1;default:return 0}}const array1dRegexp=/^([a-zA-Z_0-9]+)\[[0-9]+\]$/;class ProgramUniform{constructor(program,index){this.program=program;this.index=index;this.valueHashCode=0;this.textureUnit=-1;this.context=program.context;const gl=program.context.gl;{const activeInfo=gl.getActiveUniform(program.glProgram,index);if(activeInfo===null){throw new Error(`Can not find uniform with index: ${index}`)}const array1dMatch=activeInfo.name.match(array1dRegexp);if(array1dMatch!==null){this.name=array1dMatch[1];this.dimensions=1}else{this.name=activeInfo.name;this.dimensions=0}this.size=activeInfo.size;this.uniformType=activeInfo.type;const glLocation=gl.getUniformLocation(program.glProgram,this.name);if(glLocation===null){throw new Error(`can not find uniform named: ${this.name}`)}this.glLocation=glLocation}}set(value){const gl=this.context.gl;switch(this.uniformType){case UniformType.Int:if(typeof value==="number"){if(value!==this.valueHashCode){gl.uniform1i(this.glLocation,value);this.valueHashCode=value}return this}if(value instanceof Array&&value.length>0&&typeof value[0]==="number"){gl.uniform1iv(this.glLocation,value);this.valueHashCode=-1;return this}break;case UniformType.Float:if(typeof value==="number"){if(value!==this.valueHashCode){gl.uniform1f(this.glLocation,value);this.valueHashCode=value}return this}if(value instanceof Array&&value.length>0&&typeof value[0]==="number"){gl.uniform1fv(this.glLocation,value);this.valueHashCode=-1;return this}break;case UniformType.FloatVec2:if(value instanceof Vector2){const hashCode=value.getHashCode();if(hashCode!==this.valueHashCode){gl.uniform2f(this.glLocation,value.x,value.y);this.valueHashCode=hashCode}return this}if(value instanceof Array&&value.length>0&&value[0]instanceof Vector2){const array=linearizeVector2FloatArray(value);gl.uniform2fv(this.glLocation,array);this.valueHashCode=-1;return this}break;case UniformType.FloatVec3:if(value instanceof Vector3){const hashCode=value.getHashCode();if(hashCode!==this.valueHashCode){gl.uniform3f(this.glLocation,value.x,value.y,value.z);this.valueHashCode=hashCode}return this}if(value instanceof Array&&value.length>0&&value[0]instanceof Vector3){const array=linearizeVector3FloatArray(value);gl.uniform3fv(this.glLocation,array);this.valueHashCode=-1;return this}break;case UniformType.FloatMat4:if(value instanceof Matrix4){const hashCode=value.getHashCode();if(hashCode!==this.valueHashCode){gl.uniformMatrix4fv(this.glLocation,false,value.elements);this.valueHashCode=hashCode}return this}if(value instanceof Array&&value.length>0&&value[0]instanceof Matrix4){const array=linearizeMatrix4FloatArray(value);gl.uniformMatrix4fv(this.glLocation,false,array);this.valueHashCode=-1;return this}break;case UniformType.Sampler2D:if(value instanceof TexImage2D){gl.activeTexture(GL.TEXTURE0+this.textureUnit);gl.bindTexture(GL.TEXTURE_2D,value.glTexture);gl.uniform1i(this.glLocation,this.textureUnit);return this}break;case UniformType.SamplerCube:if(value instanceof TexImage2D){gl.activeTexture(GL.TEXTURE0+this.textureUnit);gl.bindTexture(GL.TEXTURE_CUBE_MAP,value.glTexture);gl.uniform1i(this.glLocation,this.textureUnit);return this}break}throw new Error(`unsupported uniform type - value mismatch: ${UniformType[this.uniformType]}(${this.uniformType}) on '${this.name}'`)}}var __classPrivateFieldGet$1=undefined&&undefined.__classPrivateFieldGet||function(receiver,privateMap){if(!privateMap.has(receiver)){throw new TypeError("attempted to get private field on non-instance")}return privateMap.get(receiver)};var __classPrivateFieldSet$1=undefined&&undefined.__classPrivateFieldSet||function(receiver,privateMap,value){if(!privateMap.has(receiver)){throw new TypeError("attempted to set private field on non-instance")}privateMap.set(receiver,value);return value};var _validated$1,_uniformsInitialized,_uniforms,_attributesInitialized,_attributes;class Program{constructor(context,vertexShaderCode,fragmentShaderCode,glslVersion){this.context=context;this.disposed=false;_validated$1.set(this,false);_uniformsInitialized.set(this,false);_uniforms.set(this,{});_attributesInitialized.set(this,false);_attributes.set(this,{});this.vertexShader=new Shader(this.context,vertexShaderCode,ShaderType.Vertex,glslVersion);this.fragmentShader=new Shader(this.context,fragmentShaderCode,ShaderType.Fragment,glslVersion);const gl=this.context.gl;{const glProgram=gl.createProgram();if(glProgram===null){throw new Error("createProgram failed")}this.glProgram=glProgram}gl.attachShader(this.glProgram,this.vertexShader.glShader);gl.attachShader(this.glProgram,this.fragmentShader.glShader);gl.linkProgram(this.glProgram)}validate(){if(__classPrivateFieldGet$1(this,_validated$1)||this.disposed){return true}const gl=this.context.gl;const psc=this.context.glxo.KHR_parallel_shader_compile;if(psc!==null){if(!gl.getProgramParameter(this.glProgram,psc.COMPLETION_STATUS_KHR)){return false}}if(!gl.getProgramParameter(this.glProgram,gl.LINK_STATUS)){this.vertexShader.validate();this.fragmentShader.validate();const infoLog=gl.getProgramInfoLog(this.glProgram);console.error(infoLog);this.vertexShader.dispose();this.fragmentShader.dispose();this.disposed=true;throw new Error(`program filed to link: ${infoLog}`)}__classPrivateFieldSet$1(this,_validated$1,true);return true}get uniforms(){if(!__classPrivateFieldGet$1(this,_uniformsInitialized)){let textureUnitCount=0;const gl=this.context.gl;const numActiveUniforms=gl.getProgramParameter(this.glProgram,gl.ACTIVE_UNIFORMS);for(let i=0;i<numActiveUniforms;++i){const uniform=new ProgramUniform(this,i);if(numTextureUnits(uniform.uniformType)>0){uniform.textureUnit=textureUnitCount;textureUnitCount++}__classPrivateFieldGet$1(this,_uniforms)[uniform.name]=uniform}__classPrivateFieldSet$1(this,_uniformsInitialized,true)}return __classPrivateFieldGet$1(this,_uniforms)}get attributes(){if(!__classPrivateFieldGet$1(this,_attributesInitialized)){const gl=this.context.gl;const numActiveAttributes=gl.getProgramParameter(this.glProgram,gl.ACTIVE_ATTRIBUTES);for(let i=0;i<numActiveAttributes;++i){const attribute=new ProgramAttribute(this,i);__classPrivateFieldGet$1(this,_attributes)[attribute.name]=attribute}__classPrivateFieldSet$1(this,_attributesInitialized,true)}return __classPrivateFieldGet$1(this,_attributes)}setUniformValues(uniformValueMap){this.context.program=this;for(const uniformName in uniformValueMap){const uniform=this.uniforms[uniformName];if(uniform!==undefined){uniform.set(uniformValueMap[uniformName])}}return this}setAttributeBuffers(buffers){const gl=this.context.gl;const glxVAO=this.context.glx.OES_vertex_array_object;if(buffers instanceof BufferGeometry){const bufferGeometry=buffers;for(const name in this.attributes){const attribute=this.attributes[name];const bufferAccessor=bufferGeometry.bufferAccessors[name];if(attribute!==undefined&&bufferAccessor!==undefined){attribute.setBuffer(bufferAccessor)}}if(bufferGeometry.indices!==undefined){gl.bindBuffer(bufferGeometry.indices.buffer.target,bufferGeometry.indices.buffer.glBuffer)}}else if(buffers instanceof VertexArrayObject){const vao=buffers;glxVAO.bindVertexArrayOES(vao.glVertexArrayObject)}else{throw new Error("not implemented")}return this}dispose(){if(!this.disposed){this.vertexShader.dispose();this.fragmentShader.dispose();this.context.gl.deleteProgram(this.glProgram);this.disposed=true}}}_validated$1=new WeakMap,_uniformsInitialized=new WeakMap,_uniforms=new WeakMap,_attributesInitialized=new WeakMap,_attributes=new WeakMap;function makeProgramFromShaderMaterial(context,shaderMaterial){return new Program(context,shaderMaterial.vertexShaderCode,shaderMaterial.fragmentShaderCode,shaderMaterial.glslVersion)}class Box2{constructor(min=new Vector2(+Infinity,+Infinity),max=new Vector2(+Infinity,+Infinity)){this.min=min;this.max=max}get x(){return this.min.x}get y(){return this.min.y}get left(){return this.min.x}get top(){return this.min.y}get width(){return this.max.x-this.min.x}get height(){return this.max.y-this.min.y}get bottom(){return this.max.y}get right(){return this.max.x}getHashCode(){return hashFloat2(this.min.getHashCode(),this.max.getHashCode())}set(min,max){this.min.copy(min);this.max.copy(max);return this}clone(){return(new Box2).copy(this)}copy(box){this.min.copy(box.min);this.max.copy(box.max);return this}getCenter(v){return v.set((this.min.x+this.max.x)*.5,(this.min.y+this.max.y)*.5)}makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}union(box){this.min.min(box.min);this.max.max(box.max);return this}translate(offset){this.min.add(offset);this.max.add(offset);return this}equals(box){return box.min.equals(this.min)&&box.max.equals(this.max)}}var Blending;(function(Blending){Blending[Blending["None"]=0]="None";Blending[Blending["Over"]=1]="Over";Blending[Blending["Add"]=2]="Add";Blending[Blending["Subtract"]=3]="Subtract";Blending[Blending["Multiply"]=4]="Multiply"})(Blending||(Blending={}));var BlendEquation;(function(BlendEquation){BlendEquation[BlendEquation["Add"]=GL.FUNC_ADD]="Add";BlendEquation[BlendEquation["Subtract"]=GL.FUNC_SUBTRACT]="Subtract";BlendEquation[BlendEquation["ReverseSubtract"]=GL.FUNC_REVERSE_SUBTRACT]="ReverseSubtract"})(BlendEquation||(BlendEquation={}));var BlendFunc;(function(BlendFunc){BlendFunc[BlendFunc["Zero"]=GL.ZERO]="Zero";BlendFunc[BlendFunc["One"]=GL.ONE]="One";BlendFunc[BlendFunc["SourceColor"]=GL.SRC_COLOR]="SourceColor";BlendFunc[BlendFunc["OneMinusSourceColor"]=GL.ONE_MINUS_SRC_COLOR]="OneMinusSourceColor";BlendFunc[BlendFunc["DestColor"]=GL.DST_COLOR]="DestColor";BlendFunc[BlendFunc["OneMinusDestColor"]=GL.ONE_MINUS_DST_COLOR]="OneMinusDestColor";BlendFunc[BlendFunc["SourceAlpha"]=GL.SRC_ALPHA]="SourceAlpha";BlendFunc[BlendFunc["OneMinusSourceAlpha"]=GL.ONE_MINUS_SRC_ALPHA]="OneMinusSourceAlpha";BlendFunc[BlendFunc["DestAlpha"]=GL.DST_ALPHA]="DestAlpha";BlendFunc[BlendFunc["OneMinusDestAlpha"]=GL.ONE_MINUS_DST_ALPHA]="OneMinusDestAlpha";BlendFunc[BlendFunc["ConstantColor"]=GL.CONSTANT_COLOR]="ConstantColor";BlendFunc[BlendFunc["OneMinusConstantColor"]=GL.ONE_MINUS_CONSTANT_COLOR]="OneMinusConstantColor";BlendFunc[BlendFunc["ConstantAlpha"]=GL.CONSTANT_ALPHA]="ConstantAlpha";BlendFunc[BlendFunc["OneMinusConstantAlpha"]=GL.ONE_MINUS_CONSTANT_ALPHA]="OneMinusConstantAlpha";BlendFunc[BlendFunc["SourceAlphaSaturate"]=GL.SRC_ALPHA_SATURATE]="SourceAlphaSaturate"})(BlendFunc||(BlendFunc={}));class BlendState{constructor(enabled=false,sourceRGBFactor=BlendFunc.One,destRGBFactor=BlendFunc.Zero,sourceAlphaFactor=BlendFunc.One,destAlphaFactor=BlendFunc.Zero,equation=BlendEquation.Add){this.enabled=enabled;this.sourceRGBFactor=sourceRGBFactor;this.destRGBFactor=destRGBFactor;this.sourceAlphaFactor=sourceAlphaFactor;this.destAlphaFactor=destAlphaFactor;this.equation=equation}clone(){return new BlendState(this.enabled,this.sourceRGBFactor,this.destRGBFactor,this.sourceAlphaFactor,this.destAlphaFactor,this.equation)}copy(bs){this.enabled=bs.enabled;this.sourceRGBFactor=bs.sourceRGBFactor;this.destRGBFactor=bs.destRGBFactor;this.sourceAlphaFactor=bs.sourceAlphaFactor;this.destAlphaFactor=bs.destAlphaFactor;this.equation=bs.equation}equals(bs){return this.enabled===bs.enabled&&this.sourceRGBFactor===bs.sourceRGBFactor&&this.destRGBFactor===bs.destRGBFactor&&this.sourceAlphaFactor===bs.sourceAlphaFactor&&this.destAlphaFactor===bs.destAlphaFactor&&this.equation===bs.equation}}function getRequiredExtension(gl,extensionName){const ext=gl.getExtension(extensionName);if(ext===null){throw new Error(`required extension ${extensionName} not available.`)}return ext}class Extensions{constructor(gl){this.OES_element_index_uint=getRequiredExtension(gl,"OES_element_index_uint");this.OES_standard_derivatives=getRequiredExtension(gl,"OES_standard_derivatives");this.OES_vertex_array_object=getRequiredExtension(gl,"OES_vertex_array_object");this.WEBGL_depth_texture=getRequiredExtension(gl,"WEBGL_depth_texture")}}class KHR_parallel_shader_compile{constructor(){this.MAX_SHADER_COMPILER_THREADS_KHR=37296;this.COMPLETION_STATUS_KHR=37297}}class OptionalExtensions{constructor(gl){this.EXT_shader_texture_lod=gl.getExtension("EXT_shader_texture_lod");this.EXT_texture_filter_anisotropic=gl.getExtension("EXT_texture_filter_anisotropic");this.KHR_parallel_shader_compile=gl.getExtension("KHR_parallel_shader_compile")!==null?new KHR_parallel_shader_compile:null;this.WEBGL_debug_renderer_info=gl.getExtension("WEBGL_debug_renderer_info");this.WEBGL_debug_shaders=gl.getExtension("WEBGL_debug_shaders")}}var AttachmentPoint;(function(AttachmentPoint){AttachmentPoint[AttachmentPoint["Color0"]=GL.COLOR_ATTACHMENT0]="Color0";AttachmentPoint[AttachmentPoint["Depth"]=GL.DEPTH_ATTACHMENT]="Depth";AttachmentPoint[AttachmentPoint["DepthStencil"]=GL.DEPTH_STENCIL_ATTACHMENT]="DepthStencil";AttachmentPoint[AttachmentPoint["Stencil"]=GL.STENCIL_ATTACHMENT]="Stencil"})(AttachmentPoint||(AttachmentPoint={}));const GL$1=WebGLRenderingContext;class VirtualFramebuffer{constructor(context,attachments=[]){this.context=context;this.attachments=attachments;this.disposed=false;this.cullingState=undefined;this.clearState=undefined;this.depthTestState=undefined;this.blendState=undefined;this.maskState=undefined;this.viewport=undefined}clear(attachmentBits=AttachmentBits.Color|AttachmentBits.Depth,clearState=undefined){var _a;this.context.framebuffer=this;this.context.clearState=(_a=clearState!==null&&clearState!==void 0?clearState:this.clearState)!==null&&_a!==void 0?_a:this.context.clearState;const gl=this.context.gl;gl.clear(attachmentBits)}renderBufferGeometry(program,uniforms,bufferGeometry,depthTestState=undefined,blendState=undefined,maskState=undefined,cullingState=undefined){var _a,_b,_c,_d;this.context.framebuffer=this;this.context.blendState=(_a=blendState!==null&&blendState!==void 0?blendState:this.blendState)!==null&&_a!==void 0?_a:this.context.blendState;this.context.depthTestState=(_b=depthTestState!==null&&depthTestState!==void 0?depthTestState:this.depthTestState)!==null&&_b!==void 0?_b:this.context.depthTestState;this.context.maskState=(_c=maskState!==null&&maskState!==void 0?maskState:this.maskState)!==null&&_c!==void 0?_c:this.context.maskState;this.context.cullingState=(_d=cullingState!==null&&cullingState!==void 0?cullingState:this.cullingState)!==null&&_d!==void 0?_d:this.context.cullingState;this.context.program=program;this.context.program.setUniformValues(uniforms);this.context.program.setAttributeBuffers(bufferGeometry);const gl=this.context.gl;this.context.viewport=new Box2(new Vector2,this.size);if(bufferGeometry.indices!==undefined){gl.drawElements(bufferGeometry.primitive,bufferGeometry.count,bufferGeometry.indices.componentType,0)}else{gl.drawArrays(bufferGeometry.primitive,0,bufferGeometry.count)}}renderVertexArrayObject(program,uniforms,vao,depthTestState=undefined,blendState=undefined,maskState=undefined,cullingState=undefined){var _a,_b,_c,_d;this.context.framebuffer=this;this.context.blendState=(_a=blendState!==null&&blendState!==void 0?blendState:this.blendState)!==null&&_a!==void 0?_a:this.context.blendState;this.context.depthTestState=(_b=depthTestState!==null&&depthTestState!==void 0?depthTestState:this.depthTestState)!==null&&_b!==void 0?_b:this.context.depthTestState;this.context.maskState=(_c=maskState!==null&&maskState!==void 0?maskState:this.maskState)!==null&&_c!==void 0?_c:this.context.maskState;this.context.cullingState=(_d=cullingState!==null&&cullingState!==void 0?cullingState:this.cullingState)!==null&&_d!==void 0?_d:this.context.cullingState;this.context.program=program;this.context.program.setUniformValues(uniforms);this.context.program.setAttributeBuffers(vao);const gl=this.context.gl;gl.drawArrays(vao.primitive,vao.offset,vao.count)}renderPass(program,uniforms,depthTestState=undefined,blendState=undefined,maskState=undefined,cullingState=undefined){var _a,_b,_c,_d;this.context.framebuffer=this;this.context.blendState=(_a=blendState!==null&&blendState!==void 0?blendState:this.blendState)!==null&&_a!==void 0?_a:this.context.blendState;this.context.depthTestState=(_b=depthTestState!==null&&depthTestState!==void 0?depthTestState:this.depthTestState)!==null&&_b!==void 0?_b:this.context.depthTestState;this.context.maskState=(_c=maskState!==null&&maskState!==void 0?maskState:this.maskState)!==null&&_c!==void 0?_c:this.context.maskState;this.context.cullingState=(_d=cullingState!==null&&cullingState!==void 0?cullingState:this.cullingState)!==null&&_d!==void 0?_d:this.context.cullingState;this.context.renderPass(program,uniforms)}render(node,camera,clear=false){this.context.framebuffer=this;if(clear){this.clear()}this.context.render(node,camera)}readPixels(pixelBuffer){const attachment=this.attachments.find(attachment=>attachment.attachmentPoint===AttachmentPoint.Color0);if(attachment===undefined){throw new Error("can not find Color0 attachment")}const texImage2D=attachment.texImage2D;const dataType=texImage2D.dataType;const pixelFormat=texImage2D.pixelFormat;if(pixelFormat!==PixelFormat.RGBA){throw new Error(`can not read non-RGBA color0 attachment: ${pixelFormat}`)}const oldFramebuffer=this.context.framebuffer;this.context.framebuffer=this;try{const status=this.context.gl.checkFramebufferStatus(GL$1.FRAMEBUFFER);if(status!==GL$1.FRAMEBUFFER_COMPLETE){throw new Error(`can not read non-complete Framebuffer: ${status}`)}const pixelByteLength=sizeOfDataType(dataType)*numPixelFormatComponents(pixelFormat)*texImage2D.size.width*texImage2D.size.height;if(pixelBuffer.byteLength<pixelByteLength){throw new Error(`pixelBuffer too small: ${pixelBuffer.byteLength} < ${pixelByteLength}`)}this.context.gl.readPixels(0,0,texImage2D.size.width,texImage2D.size.height,pixelFormat,dataType,pixelBuffer);return pixelBuffer}finally{this.context.framebuffer=oldFramebuffer}}}class CanvasFramebuffer extends VirtualFramebuffer{constructor(context){super(context);this.devicePixelRatio=1;this.autoResize=true;this.canvas=context.gl.canvas;const canvas=this.canvas;if(canvas instanceof HTMLCanvasElement){window.addEventListener("resize",()=>{if(this.autoResize===true){this.resize()}})}}resize(){const canvas=this.canvas;if(canvas instanceof HTMLCanvasElement){const width=Math.floor(canvas.clientWidth/this.devicePixelRatio);const height=Math.floor(canvas.clientHeight/this.devicePixelRatio);console.log("width",width,"height",height);if(canvas.width!==width||canvas.height!==height){canvas.width=width;canvas.height=height}}}get size(){return new Vector2(this.context.gl.drawingBufferWidth,this.context.gl.drawingBufferHeight)}get aspectRatio(){return this.context.gl.drawingBufferWidth/this.context.gl.drawingBufferHeight}dispose(){}renderVertexArrayObject(program,uniforms,vao,depthTestState=undefined,blendState=undefined,maskState=undefined){super.renderVertexArrayObject(program,uniforms,vao,depthTestState,blendState,maskState)}renderBufferGeometry(program,uniforms,bufferGeometry,depthTestState=undefined,blendState=undefined,maskState=undefined){super.renderBufferGeometry(program,uniforms,bufferGeometry,depthTestState,blendState,maskState)}renderPass(program,uniforms,depthTestState=undefined,blendState=undefined,maskState=undefined){super.renderPass(program,uniforms,depthTestState,blendState,maskState)}render(node,camera,clear=false){super.render(node,camera,clear)}}var __classPrivateFieldGet$2=undefined&&undefined.__classPrivateFieldGet||function(receiver,privateMap){if(!privateMap.has(receiver)){throw new TypeError("attempted to get private field on non-instance")}return privateMap.get(receiver)};var _size;class Framebuffer extends VirtualFramebuffer{constructor(context,attachments=[]){super(context,attachments);_size.set(this,new Vector2);const gl=this.context.gl;{const glFramebuffer=gl.createFramebuffer();if(glFramebuffer===null){throw new Error("createFramebuffer failed")}this.glFramebuffer=glFramebuffer}gl.bindFramebuffer(GL.FRAMEBUFFER,this.glFramebuffer);attachments.forEach(attachment=>{gl.framebufferTexture2D(GL.FRAMEBUFFER,attachment.attachmentPoint,attachment.texImage2D.target,attachment.texImage2D.glTexture,0);this.size.copy(attachment.texImage2D.size)})}get size(){return __classPrivateFieldGet$2(this,_size)}dispose(){if(!this.disposed){const gl=this.context.gl;gl.deleteFramebuffer(this.glFramebuffer);this.disposed=true}}}_size=new WeakMap;class MaskState{constructor(red=true,green=true,blue=true,alpha=true,depth=true,stencil=0){this.red=red;this.green=green;this.blue=blue;this.alpha=alpha;this.depth=depth;this.stencil=stencil}clone(){return new MaskState(this.red,this.green,this.blue,this.alpha,this.depth,this.stencil)}copy(ms){this.red=ms.red;this.green=ms.green;this.blue=ms.blue;this.alpha=ms.alpha;this.depth=ms.depth;this.stencil=ms.stencil}equals(ms){return this.red===ms.red&&this.green===ms.green&&this.blue===ms.blue&&this.alpha===ms.alpha&&this.depth===ms.depth&&this.stencil===ms.stencil}}function getParameterAsString(gl,parameterId,result=""){const text=gl.getParameter(parameterId);if(typeof text==="string"){result=text}return result}var __classPrivateFieldSet$2=undefined&&undefined.__classPrivateFieldSet||function(receiver,privateMap,value){if(!privateMap.has(receiver)){throw new TypeError("attempted to set private field on non-instance")}privateMap.set(receiver,value);return value};var __classPrivateFieldGet$3=undefined&&undefined.__classPrivateFieldGet||function(receiver,privateMap){if(!privateMap.has(receiver)){throw new TypeError("attempted to get private field on non-instance")}return privateMap.get(receiver)};var _program,_framebuffer,_scissor,_viewport,_depthTestState,_blendState,_clearState,_maskState,_cullingState;class RenderingContext{constructor(canvas=null){_program.set(this,undefined);_framebuffer.set(this,void 0);_scissor.set(this,new Box2);_viewport.set(this,new Box2);_depthTestState.set(this,new DepthTestState);_blendState.set(this,new BlendState);_clearState.set(this,new ClearState);_maskState.set(this,new MaskState);_cullingState.set(this,new CullingState);if(canvas===null){const element=document.getElementById("threeify-framebuffer");if(element!==null&&element instanceof HTMLCanvasElement){canvas=element;console.log("found canvas: ",canvas)}}const options={};options.alpha=true;options.antialias=true;options.depth=true;options.premultipliedAlpha=true;options.stencil=true;{const gl=canvas.getContext("webgl",options);if(gl===null){throw new Error("webgl not supported")}this.gl=gl}this.glx=new Extensions(this.gl);this.glxo=new OptionalExtensions(this.gl);this.canvasFramebuffer=new CanvasFramebuffer(this);__classPrivateFieldSet$2(this,_framebuffer,this.canvasFramebuffer)}get debugVendor(){const dri=this.glxo.WEBGL_debug_renderer_info;return dri!==null?getParameterAsString(this.gl,dri.UNMASKED_VENDOR_WEBGL):""}get debugRenderer(){const dri=this.glxo.WEBGL_debug_renderer_info;return dri!==null?getParameterAsString(this.gl,dri.UNMASKED_RENDERER_WEBGL):""}set program(program){if(__classPrivateFieldGet$3(this,_program)!==program){if(program!==undefined){program.validate();this.gl.useProgram(program.glProgram)}else{this.gl.useProgram(null)}__classPrivateFieldSet$2(this,_program,program)}}get program(){return __classPrivateFieldGet$3(this,_program)}set framebuffer(framebuffer){if(__classPrivateFieldGet$3(this,_framebuffer)!==framebuffer){if(framebuffer instanceof CanvasFramebuffer){this.gl.bindFramebuffer(GL.FRAMEBUFFER,null)}else if(framebuffer instanceof Framebuffer){this.gl.bindFramebuffer(GL.FRAMEBUFFER,framebuffer.glFramebuffer)}__classPrivateFieldSet$2(this,_framebuffer,framebuffer)}}get framebuffer(){return __classPrivateFieldGet$3(this,_framebuffer)}get scissor(){return __classPrivateFieldGet$3(this,_scissor).clone()}set scissor(s){if(!__classPrivateFieldGet$3(this,_scissor).equals(s)){this.gl.scissor(s.x,s.y,s.width,s.height);__classPrivateFieldGet$3(this,_scissor).copy(s)}}get viewport(){return __classPrivateFieldGet$3(this,_viewport).clone()}set viewport(v){if(!__classPrivateFieldGet$3(this,_viewport).equals(v)){this.gl.viewport(v.x,v.y,v.width,v.height);__classPrivateFieldGet$3(this,_viewport).copy(v)}}get blendState(){return __classPrivateFieldGet$3(this,_blendState).clone()}set blendState(bs){if(!__classPrivateFieldGet$3(this,_blendState).equals(bs)){if(bs.enabled){this.gl.enable(GL.BLEND)}else{this.gl.disable(GL.BLEND)}this.gl.blendEquation(bs.equation);this.gl.blendFuncSeparate(bs.sourceRGBFactor,bs.destRGBFactor,bs.sourceAlphaFactor,bs.destAlphaFactor);__classPrivateFieldGet$3(this,_blendState).copy(bs)}}get depthTestState(){return __classPrivateFieldGet$3(this,_depthTestState).clone()}set depthTestState(dts){if(!__classPrivateFieldGet$3(this,_depthTestState).equals(dts)){if(dts.enabled){this.gl.enable(GL.DEPTH_TEST)}else{this.gl.disable(GL.DEPTH_TEST)}this.gl.depthFunc(dts.func);__classPrivateFieldGet$3(this,_depthTestState).copy(dts)}}get clearState(){return __classPrivateFieldGet$3(this,_clearState).clone()}set clearState(cs){if(!__classPrivateFieldGet$3(this,_clearState).equals(cs)){this.gl.clearColor(cs.color.r,cs.color.g,cs.color.b,cs.alpha);this.gl.clearDepth(cs.depth);this.gl.clearStencil(cs.stencil);__classPrivateFieldGet$3(this,_clearState).copy(cs)}}get maskState(){return __classPrivateFieldGet$3(this,_maskState).clone()}set maskState(ms){if(!__classPrivateFieldGet$3(this,_maskState).equals(ms)){this.gl.colorMask(ms.red,ms.green,ms.blue,ms.alpha);this.gl.depthMask(ms.depth);this.gl.stencilMask(ms.stencil);__classPrivateFieldGet$3(this,_maskState).copy(ms)}}get cullingState(){return __classPrivateFieldGet$3(this,_cullingState).clone()}set cullingState(cs){if(!__classPrivateFieldGet$3(this,_cullingState).equals(cs)){if(cs.enabled){this.gl.enable(GL.CULL_FACE)}else{this.gl.disable(GL.CULL_FACE)}this.gl.frontFace(cs.windingOrder);this.gl.cullFace(cs.sides);__classPrivateFieldGet$3(this,_cullingState).copy(cs)}}renderPass(program,uniforms){throw new Error("not implemented")}render(node,camera){throw new Error("not implemented")}}_program=new WeakMap,_framebuffer=new WeakMap,_scissor=new WeakMap,_viewport=new WeakMap,_depthTestState=new WeakMap,_blendState=new WeakMap,_clearState=new WeakMap,_maskState=new WeakMap,_cullingState=new WeakMap;function fetchImage(url){return new Promise((resolve,reject)=>{const image=new Image;image.addEventListener("load",()=>resolve(image));image.addEventListener("error",()=>{reject(new Error(`failed to load image: ${url}`))});image.src=url})}class VirtualTexture{constructor(level=0,magFilter=TextureFilter.Linear,minFilter=TextureFilter.Linear,pixelFormat=PixelFormat.RGBA,dataType=DataType.UnsignedByte,generateMipmaps=true,anisotropicLevels=1){this.level=level;this.magFilter=magFilter;this.minFilter=minFilter;this.pixelFormat=pixelFormat;this.dataType=dataType;this.generateMipmaps=generateMipmaps;this.anisotropicLevels=anisotropicLevels;this.disposed=false;this.uuid=generateUUID();this.version=0;this.name="";this.size=new Vector2}get mipCount(){if(!this.generateMipmaps){return 1}return Math.floor(Math.log2(Math.max(this.size.width,this.size.height)))}dirty(){this.version++}dispose(){if(!this.disposed){this.disposed=true;this.dirty()}}}class Texture extends VirtualTexture{constructor(image,wrapS=TextureWrap.ClampToEdge,wrapT=TextureWrap.ClampToEdge,level=0,magFilter=TextureFilter.Linear,minFilter=TextureFilter.LinearMipmapLinear,pixelFormat=PixelFormat.RGBA,dataType=DataType.UnsignedByte,generateMipmaps=true,anisotropicLevels=1){super(level,magFilter,minFilter,pixelFormat,dataType,generateMipmaps,anisotropicLevels);this.image=image;this.wrapS=wrapS;this.wrapT=wrapT;this.size=new Vector2(image.width,image.height)}}var _lib_shaders_includes_brdfs_common_glsl=`\n#ifndef _lib_shaders_includes_brdfs_common_glsl\n#define _lib_shaders_includes_brdfs_common_glsl\n\nstruct DirectIrradiance {\n vec3 irradiance;\n vec3 lightDirection;\n};\nstruct Surface {\n vec3 position;\n vec3 normal;\n vec3 tangent;\n vec3 bitangent;\n vec3 viewDirection;\n};\nvec3 specularIntensityToF0(in vec3 specularIntensity){\n return specularIntensity*specularIntensity*0.16;\n}\nmat3 surfaceToNormalMatrix(in Surface surface){\n return mat3(surface.tangent,surface.bitangent,surface.normal);\n}\nvec3 flatSurfaceNormal(vec3 position){\n return normalize(cross(dFdx(position),dFdy(position)));\n}\nvoid uvToTangentFrame(inout Surface surface,in vec2 uv){\n vec3 tempTangent=dFdy(uv.y)*dFdx(surface.position)-dFdx(uv.y)*dFdy(surface.position);\n surface.normal=normalize(surface.normal);\n surface.tangent=normalize(tempTangent-surface.normal*dot(surface.normal,tempTangent));\n surface.bitangent=-cross(surface.normal,surface.tangent);\n}\nvoid rotateTangentFrame(inout Surface surface,in vec2 anisotropicDirection){\n \n \n mat3 normalMatrix=surfaceToNormalMatrix(surface);\n surface.tangent=normalMatrix*vec3(anisotropicDirection.yx,0.);\n surface.bitangent=normalMatrix*vec3(anisotropicDirection.x,-anisotropicDirection.y,0.);\n}\nvoid perturbSurfaceNormal_ObjectSpace(inout Surface surface,in vec3 normal){\n \n \n mat3 normalMatrix=surfaceToNormalMatrix(surface);\n surface.normal=normalMatrix*normalize(normal);\n}\nvoid perturbSurfaceNormal_TangentSpace(inout Surface surface,in vec3 normal){\n \n \n mat3 normalMatrix=surfaceToNormalMatrix(surface);\n surface.normal=normalMatrix*normalize(normal);\n}\nvoid alignSurfaceWithViewDirection(inout Surface surface){\n \n float facing=step(0.,dot(surface.viewDirection,surface.normal))*2.-1.;\n surface.tangent*=facing;\n surface.bitangent*=facing;\n surface.normal*=facing;\n}\nvoid perturbSurfaceNormal_BumpMap(inout Surface surface,in sampler2D bumpMap,in vec2 bumpUv,in float bumpScale){\n vec3 dPdx=normalize(dFdx(surface.position));\n vec3 dPdy=normalize(dFdy(surface.position));\n \n vec2 gradBump=vec2(\n texture2D(bumpMap,bumpUv+dFdx(bumpUv)).x,\n texture2D(bumpMap,bumpUv+dFdy(bumpUv)).x)-\n texture2D(bumpMap,bumpUv).x;\n gradBump*=bumpScale;\n \n vec3 R1=cross(dPdy,surface.normal);\n vec3 R2=cross(surface.normal,dPdx);\n float fDet=dot(dPdx,R1);\n fDet*=(float(gl_FrontFacing)*2.-1.);\n vec3 vGrad=sign(fDet)*(gradBump.x*R1+gradBump.y*R2);\n surface.normal=normalize(abs(fDet)*surface.normal-vGrad);\n}\n\n\n\n#endif // end of include guard\n`;var _lib_shaders_includes_math_math_glsl=`\n#ifndef _lib_shaders_includes_math_math_glsl\n#define _lib_shaders_includes_math_math_glsl\n\n#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#define saturate(a)clamp(a,0.,1.)\n#define whiteComplement(a)(1.-saturate(a))\nfloat pow2(const in float x){ return x*x;}\nfloat pow3(const in float x){ return x*x*x;}\nfloat pow4(const in float x){ float x2=x*x;return x2*x2;}\nfloat average(const in vec3 color){ return dot(color,vec3(0.3333));}\n\n\n\n#endif // end of include guard\n`;var _lib_shaders_includes_lighting_punctual_glsl=`\n#ifndef _lib_shaders_includes_lighting_punctual_glsl\n#define _lib_shaders_includes_lighting_punctual_glsl\n\n\n${_lib_shaders_includes_math_math_glsl}\n${_lib_shaders_includes_brdfs_common_glsl}\nstruct PunctualLight\n{\n int type;\n vec3 position;\n vec3 color;\n vec3 direction;\n float range;\n float innerConeCos;\n float outerConeCos;\n};\nconst int LightType_Directional=0;\nconst int LightType_Point=1;\nconst int LightType_Spot=2;\nfloat getRangeAttenuation(float distanceToLightSource,float maxRange)\n{\n if(maxRange <=0.)\n {\n \n return 1.;\n }\n return max(min(1.-pow(distanceToLightSource/maxRange,4.),1.),0.)/pow(distanceToLightSource,2.);\n}\nfloat getSpotAttenuation(vec3 pointToLight,PunctualLight punctualLight)\n{\n float actualCos=dot(punctualLight.direction,-pointToLight);\n if(actualCos > punctualLight.outerConeCos)\n {\n if(actualCos < punctualLight.innerConeCos)\n {\n return smoothstep(punctualLight.outerConeCos,punctualLight.innerConeCos,actualCos);\n }\n return 1.;\n }\n return 0.;\n}\nvoid pointLightToDirectIrradiance(in Surface surface,in PunctualLight punctualLight,out DirectIrradiance directIrradiance){\n vec3 surfaceToLight=punctualLight.position-surface.position;\n float lightAttenuation=getRangeAttenuation(length(surfaceToLight),punctualLight.range);\n vec3 lightDirection=normalize(surfaceToLight);\n directIrradiance.lightDirection=lightDirection;\n directIrradiance.irradiance=punctualLight.color*lightAttenuation*saturate(dot(surface.normal,lightDirection));\n}\nvoid spotLightToDirectIrradiance(in Surface surface,in PunctualLight punctualLight,out DirectIrradiance directIrradiance){\n vec3 surfaceToLight=punctualLight.position-surface.position;\n vec3 lightDirection=normalize(surfaceToLight);\n float lightAttenuation=getRangeAttenuation(length(surfaceToLight),punctualLight.range);\n lightAttenuation*=getSpotAttenuation(lightDirection,punctualLight);\n directIrradiance.lightDirection=lightDirection;\n directIrradiance.irradiance=punctualLight.color*lightAttenuation*saturate(dot(surface.normal,lightDirection));\n}\nvoid directionalLightToDirectIrradiance(in Surface surface,in PunctualLight punctualLight,out DirectIrradiance directIrradiance){\n directIrradiance.lightDirection=-punctualLight.direction;\n directIrradiance.irradiance=punctualLight.color*saturate(dot(surface.normal,directIrradiance.lightDirection));\n}\n\n\n\n#endif // end of include guard\n`;var _lib_shaders_includes_brdfs_diffuse_lambert_glsl=`\n#ifndef _lib_shaders_includes_brdfs_diffuse_lambert_glsl\n#define _lib_shaders_includes_brdfs_diffuse_lambert_glsl\n\n${_lib_shaders_includes_math_math_glsl}\n${_lib_shaders_includes_brdfs_common_glsl}\nvec3 BRDF_Diffuse_Lambert(\n const in vec3 albedo){\n return albedo*RECIPROCAL_PI;\n}\n\n\n\n#endif // end of include guard\n`;var _lib_shaders_includes_brdfs_specular_f_schlick_glsl=`\n#ifndef _lib_shaders_includes_brdfs_specular_f_schlick_glsl\n#define _lib_shaders_includes_brdfs_specular_f_schlick_glsl\n\nvec3 F_Schlick(const in vec3 specularColor,const in float dotLH){\n float fresnel=exp2((-5.55473*dotLH-6.98316)*dotLH);\n return(1.-specularColor)*fresnel+specularColor;\n}\nvec3 F_Schlick_2(vec3 f0,vec3 f90,float VdotH)\n{\n return f0+(f90-f0)*pow(clamp(1.-VdotH,0.,1.),5.);\n}\n\n\n\n#endif // end of include guard\n`;var _lib_shaders_includes_brdfs_specular_v_ggx_smithcorrelated_glsl=`\n#ifndef _lib_shaders_includes_brdfs_specular_v_ggx_smithcorrelated_glsl\n#define _lib_shaders_includes_brdfs_specular_v_ggx_smithcorrelated_glsl\n\n${_lib_shaders_includes_math_math_glsl}\nfloat V_GGX_SmithCorrelated(const in float alpha,const in float dotNL,const in float dotNV){\n float a2=pow2(alpha);\n float gv=dotNL*sqrt(a2+(1.-a2)*pow2(dotNV));\n float gl=dotNV*sqrt(a2+(1.-a2)*pow2(dotNL));\n return 0.5/max(gv+gl,EPSILON);\n}\n\n\n\n#endif // end of include guard\n`;var _lib_shaders_includes_brdfs_specular_d_ggx_glsl=`\n#ifndef _lib_shaders_includes_brdfs_specular_d_ggx_glsl\n#define _lib_shaders_includes_brdfs_specular_d_ggx_glsl\n\n${_lib_shaders_includes_math_math_glsl}\nfloat D_GGX(const in float alpha,const in float dotNH){\n float a2=pow2(alpha);\n float denom=pow2(dotNH)*(a2-1.)+1.;\n return RECIPROCAL_PI*a2/pow2(denom);\n}\n\n\n\n#endif // end of include guard\n`;var _lib_shaders_includes_brdfs_specular_ggx_glsl=`\n#ifndef _lib_shaders_includes_brdfs_specular_ggx_glsl\n#define _lib_shaders_includes_brdfs_specular_ggx_glsl\n\n${_lib_shaders_includes_math_math_glsl}\n${_lib_shaders_includes_brdfs_specular_f_schlick_glsl}\n${_lib_shaders_includes_brdfs_specular_v_ggx_smithcorrelated_glsl}\n${_lib_shaders_includes_brdfs_specular_d_ggx_glsl}\nvec3 BRDF_Specular_GGX(const in Surface surface,vec3 lightDirection,const in vec3 F0,const in float specularRoughness){\n float alpha=pow2(specularRoughness);\n vec3 halfDirection=normalize(lightDirection+surface.viewDirection);\n float dotNL=saturate(dot(surface.normal,lightDirection));\n float dotNV=saturate(dot(surface.normal,surface.viewDirection));\n float dotNH=saturate(dot(surface.normal,halfDirection));\n float dotLH=saturate(dot(lightDirection,halfDirection));\n vec3 F=F_Schlick(F0,dotLH);\n float V=V_GGX_SmithCorrelated(alpha,dotNL,dotNV);\n float D=D_GGX(alpha,dotNH);\n return F*(V*D);\n}\n\n\n\n#endif // end of include guard\n`;var _lib_shaders_includes_color_spaces_srgb_glsl=`\n#ifndef _lib_shaders_includes_color_spaces_srgb_glsl\n#define _lib_shaders_includes_color_spaces_srgb_glsl\n\n${_lib_shaders_includes_math_math_glsl}\nvec3 sRGBToLinear(in vec3 value){\n return vec3(mix(pow(value.rgb*0.9478672986+vec3(0.0521327014),vec3(2.4)),value.rgb*0.0773993808,vec3(lessThanEqual(value.rgb,vec3(0.04045)))));\n}\nvec3 linearTosRGB(in vec3 value){\n return vec3(mix(pow(value.rgb,vec3(0.41666))*1.055-vec3(0.055),value.rgb*12.92,vec3(lessThanEqual(value.rgb,vec3(0.0031308)))));\n}\n\n\n\n#endif // end of include guard\n`;var fragmentSourceCode=`\nprecision highp float;\nvarying vec3 v_viewSurfacePosition;\nvarying vec3 v_viewSurfaceNormal;\nvarying vec2 v_uv0;\nuniform vec3 pointLightViewPosition;\nuniform vec3 pointLightColor;\nuniform float pointLightRange;\nuniform vec3 albedoModulator;\nuniform sampler2D albedoMap;\nuniform vec3 specularModulator;\nuniform sampler2D specularMap;\nuniform float specularRoughnessModulator;\nuniform sampler2D specularRoughnessMap;\n${_lib_shaders_includes_brdfs_common_glsl}\n${_lib_shaders_includes_lighting_punctual_glsl}\n${_lib_shaders_includes_brdfs_diffuse_lambert_glsl}\n${_lib_shaders_includes_brdfs_specular_ggx_glsl}\n${_lib_shaders_includes_color_spaces_srgb_glsl}\nvoid main(){\n vec3 albedo=albedoModulator*sRGBToLinear(texture2D(albedoMap,v_uv0).rgb);\n vec3 specular=specularModulator*vec3(length(texture2D(specularMap,v_uv0).rgb));\n float specularRoughness=specularRoughnessModulator*sRGBToLinear(texture2D(specularRoughnessMap,v_uv0).rgb).r;\n vec3 specularF0=specularIntensityToF0(specular);\n Surface surface;\n surface.position=v_viewSurfacePosition;\n surface.normal=normalize(v_viewSurfaceNormal);\n surface.viewDirection=normalize(-v_viewSurfacePosition);\n PunctualLight punctualLight;\n punctualLight.position=pointLightViewPosition;\n punctualLight.color=pointLightColor;\n punctualLight.range=pointLightRange;\n DirectIrradiance directIrradiance;\n pointLightToDirectIrradiance(surface,punctualLight,directIrradiance);\n vec3 lightDirection=directIrradiance.lightDirection;\n vec3 irradiance=directIrradiance.irradiance;\n vec3 outputColor;\n outputColor+=irradiance*BRDF_Specular_GGX(surface,lightDirection,specularF0,specularRoughness);\n outputColor+=irradiance*BRDF_Diffuse_Lambert(albedo);\n gl_FragColor.rgb=linearTosRGB(outputColor);\n gl_FragColor.a=1.;\n}\n\n`;var _lib_shaders_includes_math_matrix4_glsl=`\n#ifndef _lib_shaders_includes_math_matrix4_glsl\n#define _lib_shaders_includes_math_matrix4_glsl\n\nvec3 transformPosition(in mat4 m,in vec3 p){\n return(m*vec4(p,1.)).xyz;\n}\nvec3 transformDirection(in mat4 m,in vec3 d){\n return normalize((m*vec4(d,0.)).xyz);\n}\nvec3 inverseTransformDirection(in vec3 dir,in mat4 matrix){\n return normalize((vec4(dir,0.)*matrix).xyz);\n}\n\n\n\n#endif // end of include guard\n`;var vertexSourceCode=`\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nuniform mat4 localToWorld;\nuniform mat4 worldToView;\nuniform mat4 viewToScreen;\nvarying vec3 v_viewSurfacePosition;\nvarying vec3 v_viewSurfaceNormal;\nvarying vec2 v_uv0;\n${_lib_shaders_includes_math_matrix4_glsl}\nvoid main(){\n mat4 localToView=worldToView*localToWorld;\n v_viewSurfaceNormal=transformDirection(localToView,normalize(position));\n v_viewSurfacePosition=transformPosition(localToView,position);\n v_uv0=uv;\n gl_Position=viewToScreen*vec4(v_viewSurfacePosition,1.);\n}\n\n`;async function init(){const geometry=icosahedronGeometry(.75,5);const material=new ShaderMaterial(vertexSourceCode,fragmentSourceCode);const texture=new Texture(await fetchImage("/assets/textures/planets/jupiter_2k.jpg"));const context=new RenderingContext;const canvasFramebuffer=context.canvasFramebuffer;if(canvasFramebuffer.canvas instanceof HTMLCanvasElement){document.body.appendChild(canvasFramebuffer.canvas)}const map=makeTexImage2DFromTexture(context,texture);const program=makeProgramFromShaderMaterial(context,material);const uniforms={localToWorld:new Matrix4,worldToView:makeMatrix4Translation(new Vector3(0,0,-3)),viewToScreen:makeMatrix4PerspectiveFov(25,.1,4,1,canvasFramebuffer.aspectRatio),pointLightViewPosition:new Vector3(1,0,-.5),pointLightColor:new Vector3(1,1,1).multiplyByScalar(40),pointLightRange:6,albedoModulator:new Vector3(1,1,1),albedoMap:map,specularModulator:new Vector3(1,1,1),specularMap:map,specularRoughnessModulator:1,specularRoughnessMap:map};const bufferGeometry=makeBufferGeometryFromGeometry(context,geometry);canvasFramebuffer.depthTestState=new DepthTestState(true,DepthTestFunc.Less);canvasFramebuffer.clearState=new ClearState(new Vector3(0,0,0),1);canvasFramebuffer.cullingState=new CullingState(true);function animate(){const now=Date.now();uniforms.localToWorld=makeMatrix4RotationFromEuler(new Euler(.15*Math.PI,now*2e-4,0,EulerOrder.XZY),uniforms.localToWorld);uniforms.pointLightViewPosition=new Vector3(Math.cos(now*.001)*3,2,.5);canvasFramebuffer.clear(AttachmentBits.All);canvasFramebuffer.renderBufferGeometry(program,uniforms,bufferGeometry);requestAnimationFrame(animate)}animate();return null}init()})();