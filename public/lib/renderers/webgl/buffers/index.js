(function(exports){"use strict";class UserResource{constructor(user,resource){this.user=user;this.resource=resource;this.resourceVersion=-1}update(context,updater){let disposed=false;if(this.resourceVersion<this.user.version){if(this.user.disposed){this.resource.dispose();disposed=true}else{this.resource=updater(context,this.user,this.resource)}this.resourceVersion=this.user.version}return disposed}}class Pool{constructor(context,updater){this.context=context;this.updater=updater;this.userResources=[]}request(user){let userResource=this.userResources.find(userResource=>userResource.user.uuid===user.uuid);if(userResource===undefined){userResource=new UserResource(user,this.updater(this.context,user,undefined));this.userResources.push(userResource)}return userResource.resource}update(){let disposeCount=0;this.userResources.forEach(userResource=>{if(userResource.update(this.context,this.updater)){disposeCount++}});if(disposeCount>0){this.garbageCollect()}return this}garbageCollect(){this.userResources=this.userResources.filter(userResource=>!userResource.resource.disposed);return this}}const GL=WebGLRenderingContext;(function(BufferTarget){BufferTarget[BufferTarget["Array"]=GL.ARRAY_BUFFER]="Array";BufferTarget[BufferTarget["ElementArray"]=GL.ELEMENT_ARRAY_BUFFER]="ElementArray"})(exports.BufferTarget||(exports.BufferTarget={}));(function(BufferUsage){BufferUsage[BufferUsage["StaticDraw"]=GL.STATIC_DRAW]="StaticDraw";BufferUsage[BufferUsage["DynamicDraw"]=GL.DYNAMIC_DRAW]="DynamicDraw"})(exports.BufferUsage||(exports.BufferUsage={}));class Buffer{constructor(context,arrayBuffer,target=exports.BufferTarget.Array,usage=exports.BufferUsage.StaticDraw){this.context=context;this.target=target;this.usage=usage;this.disposed=false;const gl=context.gl;{const glBuffer=gl.createBuffer();if(glBuffer===null){throw new Error("createBuffer failed")}this.glBuffer=glBuffer}gl.bindBuffer(this.target,this.glBuffer);gl.bufferData(this.target,arrayBuffer,this.usage);this.id=this.context.registerResource(this)}update(arrayBuffer,target=exports.BufferTarget.Array,usage=exports.BufferUsage.StaticDraw){this.target=target;this.usage=usage;const gl=this.context.gl;gl.bindBuffer(this.target,this.glBuffer);gl.bufferData(this.target,arrayBuffer,this.usage)}dispose(){if(!this.disposed){this.context.gl.deleteBuffer(this.glBuffer);this.context.disposeResource(this);this.disposed=true}}}class BufferPool extends Pool{constructor(context){super(context,(context,attribute,buffer)=>{if(buffer===undefined){return new Buffer(context,attribute.arrayBuffer,attribute.target)}buffer.update(attribute.arrayBuffer,attribute.target);return buffer})}}class BufferAccessor{constructor(buffer,componentType,componentsPerVertex,normalized,vertexStride,byteOffset){this.buffer=buffer;this.componentType=componentType;this.componentsPerVertex=componentsPerVertex;this.normalized=normalized;this.vertexStride=vertexStride;this.byteOffset=byteOffset}}function makeBufferAccessorFromAttribute(context,attribute,bufferTarget=undefined){const attributeData=attribute.attributeData;const target=bufferTarget!==undefined?bufferTarget:attributeData.target;const buffer=new Buffer(context,attributeData.arrayBuffer,target);const bufferAccessor=new BufferAccessor(buffer,attribute.componentType,attribute.componentsPerVertex,attribute.normalized,attribute.vertexStride,attribute.byteOffset);return bufferAccessor}(function(PrimitiveType){PrimitiveType[PrimitiveType["Points"]=GL.POINTS]="Points";PrimitiveType[PrimitiveType["Lines"]=GL.LINES]="Lines";PrimitiveType[PrimitiveType["LineStrip"]=GL.LINE_STRIP]="LineStrip";PrimitiveType[PrimitiveType["Triangles"]=GL.TRIANGLES]="Triangles";PrimitiveType[PrimitiveType["TriangleFan"]=GL.TRIANGLE_FAN]="TriangleFan";PrimitiveType[PrimitiveType["TriangleStrip"]=GL.TRIANGLE_STRIP]="TriangleStrip"})(exports.PrimitiveType||(exports.PrimitiveType={}));class BufferGeometry{constructor(context){this.context=context;this.disposed=false;this.bufferAccessors={};this.indices=undefined;this.primitive=exports.PrimitiveType.Triangles;this.count=-1}dispose(){console.warn("This is not safe.  The buffers may be used by multiple bufferViews & bufferGeometries.");if(!this.disposed){for(const name in this.bufferAccessors){const bufferAccessor=this.bufferAccessors[name];if(bufferAccessor!==undefined){bufferAccessor.buffer.dispose()}}if(this.indices!==undefined){this.indices.buffer.dispose()}this.disposed=true}}}function makeBufferGeometryFromGeometry(context,geometry){const bufferGeometry=new BufferGeometry(context);if(geometry.indices!==undefined){bufferGeometry.indices=makeBufferAccessorFromAttribute(context,geometry.indices,exports.BufferTarget.ElementArray);bufferGeometry.count=geometry.indices.count}for(const name in geometry.attributes){const attribute=geometry.attributes[name];if(attribute!==undefined){bufferGeometry.bufferAccessors[name]=makeBufferAccessorFromAttribute(context,attribute);if(bufferGeometry.count===-1){bufferGeometry.count=attribute.count}}}bufferGeometry.primitive=geometry.primitive;return bufferGeometry}(function(ComponentType){ComponentType[ComponentType["Byte"]=GL.BYTE]="Byte";ComponentType[ComponentType["UnsignedByte"]=GL.UNSIGNED_BYTE]="UnsignedByte";ComponentType[ComponentType["Short"]=GL.SHORT]="Short";ComponentType[ComponentType["UnsignedShort"]=GL.UNSIGNED_SHORT]="UnsignedShort";ComponentType[ComponentType["Int"]=GL.INT]="Int";ComponentType[ComponentType["UnsignedInt"]=GL.UNSIGNED_INT]="UnsignedInt";ComponentType[ComponentType["Float"]=GL.FLOAT]="Float"})(exports.ComponentType||(exports.ComponentType={}));function componentTypeSizeOf(componentType){switch(componentType){case exports.ComponentType.Byte:case exports.ComponentType.UnsignedByte:return 1;case exports.ComponentType.Short:case exports.ComponentType.UnsignedShort:return 2;case exports.ComponentType.Float:case exports.ComponentType.Int:case exports.ComponentType.UnsignedInt:return 4}throw new Error(`unsupported component type: ${componentType}`)}exports.Buffer=Buffer;exports.BufferAccessor=BufferAccessor;exports.BufferGeometry=BufferGeometry;exports.BufferPool=BufferPool;exports.componentTypeSizeOf=componentTypeSizeOf;exports.makeBufferAccessorFromAttribute=makeBufferAccessorFromAttribute;exports.makeBufferGeometryFromGeometry=makeBufferGeometryFromGeometry;return exports})({});